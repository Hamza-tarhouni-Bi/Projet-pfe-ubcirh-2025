[{"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\index.js":"1","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Auth.js":"2","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Index.js":"3","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Admin.js":"4","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Employe.js":"5","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Test.js":"6","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Postule.js":"7","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Forget.js":"8","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Signin.js":"9","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Dashboard.js":"10","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Maps.js":"11","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Settings.js":"12","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Tables.js":"13","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Navbars\\AdminNavbar.js":"14","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Navbars\\IndexNavbar.js":"15","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Headers\\HeaderStats.js":"16","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Footers\\FooterAdmin.js":"17","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Sidebar\\Sidebar.js":"18","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Signup.js":"19","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Recrutement.js":"20","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Personnels.js":"21","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Departement.js":"22","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Cong√©.js":"23","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Condidature.js":"24","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Formation.js":"25","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeC.js":"26","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeF.js":"27","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeA.js":"28","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\DemandeFormation.js":"29","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\SettingsEmploye.js":"30","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Sidebar\\SlidebarEmploye.js":"31","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\DemandeAvance.js":"32","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeConge.js":"33","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardSettings.js":"34","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardStats.js":"35","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Maps\\MapExample.js":"36","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\UserDropdown.js":"37","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\NotificationDropdown.js":"38","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\IndexDropdown.js":"39","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardRecrutement.js":"40","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardPersonnels.js":"41","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDepartment.js":"42","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardCondidature.js":"43","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardFormation.js":"44","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeFormation.js":"45","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeAvance.js":"46","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Footers\\Footer.js":"47"},{"size":1281,"mtime":1746389144720,"results":"48","hashOfConfig":"49"},{"size":684,"mtime":1745793608302,"results":"50","hashOfConfig":"49"},{"size":2142,"mtime":1746746651434,"results":"51","hashOfConfig":"49"},{"size":2609,"mtime":1746634662392,"results":"52","hashOfConfig":"49"},{"size":1539,"mtime":1745682320143,"results":"53","hashOfConfig":"49"},{"size":1712,"mtime":1746629112543,"results":"54","hashOfConfig":"49"},{"size":32996,"mtime":1748016948432,"results":"55","hashOfConfig":"49"},{"size":106,"mtime":1746384450159,"results":"56","hashOfConfig":"49"},{"size":15347,"mtime":1747787093553,"results":"57","hashOfConfig":"49"},{"size":1952,"mtime":1747705594207,"results":"58","hashOfConfig":"49"},{"size":444,"mtime":1741431010757,"results":"59","hashOfConfig":"49"},{"size":375,"mtime":1745773788021,"results":"60","hashOfConfig":"49"},{"size":26840,"mtime":1747787069977,"results":"61","hashOfConfig":"49"},{"size":848,"mtime":1743717836528,"results":"62","hashOfConfig":"49"},{"size":3407,"mtime":1745713341681,"results":"63","hashOfConfig":"49"},{"size":3795,"mtime":1747786911814,"results":"64","hashOfConfig":"49"},{"size":895,"mtime":1742218811241,"results":"65","hashOfConfig":"49"},{"size":13517,"mtime":1747786965508,"results":"66","hashOfConfig":"49"},{"size":8733,"mtime":1742861437019,"results":"67","hashOfConfig":"49"},{"size":199,"mtime":1742947662951,"results":"68","hashOfConfig":"49"},{"size":357,"mtime":1742516294347,"results":"69","hashOfConfig":"49"},{"size":294,"mtime":1742309635114,"results":"70","hashOfConfig":"49"},{"size":8146,"mtime":1745778206822,"results":"71","hashOfConfig":"49"},{"size":288,"mtime":1745418166978,"results":"72","hashOfConfig":"49"},{"size":337,"mtime":1745236991061,"results":"73","hashOfConfig":"49"},{"size":27643,"mtime":1748270822028,"results":"74","hashOfConfig":"49"},{"size":18017,"mtime":1748270772974,"results":"75","hashOfConfig":"49"},{"size":25863,"mtime":1747843276983,"results":"76","hashOfConfig":"49"},{"size":300,"mtime":1743699950581,"results":"77","hashOfConfig":"49"},{"size":214,"mtime":1743810790877,"results":"78","hashOfConfig":"49"},{"size":7814,"mtime":1747786977074,"results":"79","hashOfConfig":"49"},{"size":243,"mtime":1743810665950,"results":"80","hashOfConfig":"49"},{"size":17487,"mtime":1748270873089,"results":"81","hashOfConfig":"49"},{"size":33002,"mtime":1747860463948,"results":"82","hashOfConfig":"49"},{"size":2043,"mtime":1746725685370,"results":"83","hashOfConfig":"49"},{"size":2413,"mtime":1741431010753,"results":"84","hashOfConfig":"49"},{"size":2434,"mtime":1743717986858,"results":"85","hashOfConfig":"49"},{"size":2481,"mtime":1741431010750,"results":"86","hashOfConfig":"49"},{"size":3805,"mtime":1741741857414,"results":"87","hashOfConfig":"49"},{"size":21236,"mtime":1747861034902,"results":"88","hashOfConfig":"49"},{"size":33187,"mtime":1747860895452,"results":"89","hashOfConfig":"49"},{"size":26249,"mtime":1747861322669,"results":"90","hashOfConfig":"49"},{"size":23965,"mtime":1747845809726,"results":"91","hashOfConfig":"49"},{"size":39859,"mtime":1748014109240,"results":"92","hashOfConfig":"49"},{"size":18011,"mtime":1748271483173,"results":"93","hashOfConfig":"49"},{"size":10426,"mtime":1747786700039,"results":"94","hashOfConfig":"49"},{"size":7192,"mtime":1744061726167,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"dzmoog",{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"98"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"98"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"98"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\index.js",[],["202","203"],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Auth.js",["204"],"import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\n// components\r\nimport Navbar from \"components/Navbars/IndexNavbar\";\r\n\r\n\r\n// views\r\nimport Signin from \"views/auth/Signin\";\r\nimport Signup from \"views/auth/Signup\";\r\n\r\n\r\nexport default function Auth() {\r\n  return (\r\n    <>\r\n      <Navbar transparent />\r\n      <main>\r\n      \r\n          \r\n          <Switch>\r\n            <Route path=\"/auth/signin\" exact component={Signin} />\r\n           \r\n            <Route path=\"/auth/signup\" exact component={Signup} />\r\n            \r\n          \r\n         \r\n            \r\n           \r\n          </Switch>\r\n       \r\n        \r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Index.js",["205","206"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport IndexNavbar from \"components/Navbars/IndexNavbar.js\";\r\nimport Signin from \"./auth/Signin\";\r\nimport Postule from \"./Postule\";\r\n\r\nexport default function Index() {\r\n  return (\r\n    <>\r\n      <IndexNavbar fixed />\r\n      <section className=\"header relative pt-16 items-center flex h-screen max-h-860-px\">\r\n        <div className=\"container mx-auto items-center flex flex-wrap\">\r\n          <div className=\"w-full md:w-8/12 lg:w-6/12 xl:w-6/12 px-4\">\r\n            <div className=\"pt-32 sm:pt-0\">\r\n              <h2 className=\"font-semibold text-4xl text-blueGray-600\">\r\n               BIENVENUE SUR UBCI HR MANAGER\r\n              </h2>\r\n              <p className=\"mt-4 text-lg leading-relaxed text-blueGray-500\">\r\n              UBCI RH est un site web d√©di√© √† la gestion des ressources humaines de la banque UBCI, facilitant le suivi du personnel, la gestion des cong√©s et l'automatisation des t√¢ches administratives.\r\n              </p>\r\n              <div className=\"mt-12\">\r\n                <Link\r\n                  to=\"/postule\"\r\n                  className=\"get-started text-white font-bold px-6 py-4 rounded outline-none focus:outline-none mr-1 mb-1 bg-lightBlue-500 active:bg-lightBlue-600 uppercase text-sm shadow hover:shadow-lg ease-linear transition-all duration-150\"\r\n                >\r\n                  Postuler\r\n                </Link>\r\n                <Link\r\n                  to=\"/signin\"\r\n                  className=\"github-star ml-1 text-white font-bold px-6 py-4 rounded outline-none focus:outline-none mr-1 mb-1 bg-blueGray-700 active:bg-blueGray-600 uppercase text-sm shadow hover:shadow-lg ease-linear transition-all duration-150\"\r\n                >\r\n                  Mon Espace\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <img\r\n          className=\"absolute top-0 right-0 pt-1 sm:w-6/12 sm:max-h-full -mt-48 sm:mt-0 w-full h-full object-cover\"\r\n          src={require(\"assets/img/ubci.jpg\").default}\r\n          alt=\"...\"\r\n        />\r\n      </section>\r\n    </>\r\n  );\r\n}","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Admin.js",["207"],"import React from \"react\";\r\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\r\n\r\n// components\r\n\r\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\r\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\r\nimport HeaderStats from \"components/Headers/HeaderStats.js\";\r\nimport FooterAdmin from \"components/Footers/FooterAdmin.js\";\r\n\r\n\r\n// views\r\n\r\nimport Dashboard from \"views/admin/Dashboard.js\";\r\nimport Maps from \"views/admin/Maps.js\";\r\nimport Settings from \"views/admin/Settings.js\";\r\nimport Tables from \"views/admin/Tables.js\";\r\nimport Personnels from \"views/admin/Personnels\";\r\nimport Departement from \"views/admin/Departement\";\r\nimport Cong√© from \"views/admin/Cong√©\";\r\nimport Formation from \"views/admin/Formation\";\r\nimport Recrutement from \"views/Recrutement\";\r\nimport DemandeFormation from \"views/employe/DemandeFormation\";\r\nimport Condidature from \"views/admin/Condidature\";\r\nimport DemandeF from \"views/admin/DemandeF\";\r\nimport DemandeA from \"views/admin/DemandeA\";\r\nimport DemandeC from \"views/admin/DemandeC\";\r\nexport default function Admin() {\r\n  const location = useLocation(); \r\n  return (\r\n    <>\r\n      <Sidebar />\r\n      <div className=\"relative md:ml-64 bg-blueGray-100\">\r\n     \r\n        \r\n      {location.pathname !== \"/admin/dashboard\" && <HeaderStats />}\r\n        <div className=\"px-4 md:px-10 mx-auto w-full -m-24\">\r\n          <Switch>\r\n            <Route path=\"/admin/dashboard\" exact component={Dashboard} />\r\n            <Route path=\"/admin/personnels\" exact component={Personnels} />\r\n            <Route path=\"/admin/departement\" exact component={Departement} />\r\n            <Route path=\"/admin/cong√©\" exact component={Cong√©} />\r\n            <Route path=\"/admin/formation\" exact component={Formation} />\r\n            <Route path=\"/admin/demandeformation\" exact component={DemandeFormation} />\r\n           <Route path=\"/admin/maps\" exact component={Maps} />\r\n            <Route path=\"/admin/settings\" exact component={Settings} />\r\n            <Route path=\"/admin/tables\" exact component={Tables} />\r\n            <Route path=\"/admin/recrutement\" exact component={Recrutement} />\r\n            <Route path=\"/admin/demandef\" exact component={DemandeF} />\r\n            <Route path=\"/admin/demandea\" exact component={DemandeA} />\r\n            <Route path=\"/admin/demandec\" exact component={DemandeC} />\r\n\r\n            \r\n            <Route path=\"/admin/condidature\" exact component={Condidature} />\r\n           <Redirect from=\"/admin\" to=\"/admin/dashboard\" />\r\n          </Switch>\r\n          <FooterAdmin />\r\n     </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\layouts\\Employe.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Test.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Postule.js",["208","209"],"import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"components/Navbars/IndexNavbar\";\r\nimport axios from \"axios\";\r\n\r\nconst Postule = () => {\r\n  // State for job listings and search\r\n  const [jobListings, setJobListings] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // State for modal and selected job\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n  const [fileName, setFileName] = useState(\"Aucun fichier s√©lectionn√©\");\r\n  const [fileError, setFileError] = useState(\"\");\r\n\r\n  // Form data state\r\n  const [formData, setFormData] = useState({\r\n    prenom: \"\",\r\n    nom: \"\",\r\n    adresse: \"\",\r\n    email: \"\",\r\n    tel: \"\",\r\n    cv: null\r\n  });\r\n\r\n  // Form validation errors\r\n  const [formErrors, setFormErrors] = useState({\r\n    prenom: \"\",\r\n    nom: \"\",\r\n    tel: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n  // Search and filter states\r\n  const [dateFilter, setDateFilter] = useState(\"N'importe quand\");\r\n  const [isDateExpanded, setIsDateExpanded] = useState(true);\r\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [hasSearched, setHasSearched] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitSuccess, setSubmitSuccess] = useState(false);\r\n  const [submitError, setSubmitError] = useState(\"\");\r\n\r\n  // Fetch job listings from backend\r\n  useEffect(() => {\r\n    const fetchJobListings = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await axios.get('/api/alloffre');\r\n        \r\n        const formattedJobs = response.data.map(job => ({\r\n          id: job._id,\r\n          title: job.titre,\r\n          location: job.lieu,\r\n          date: formatDate(new Date(job.date))\r\n        }));\r\n        \r\n        setJobListings(formattedJobs);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error(\"Error fetching job listings:\", err);\r\n        setError(\"Une erreur s'est produite lors du chargement des offres d'emploi.\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchJobListings();\r\n  }, []);\r\n\r\n  // Helper function to format date as DD/MM/YYYY\r\n  const formatDate = (date) => {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n  };\r\n\r\n  // Function to toggle date filter section\r\n  const toggleDateSection = () => {\r\n    setIsDateExpanded(!isDateExpanded);\r\n  };\r\n\r\n  // Reset all filters\r\n  const resetFilters = () => {\r\n    setDateFilter(\"N'importe quand\");\r\n    setSearchKeyword(\"\");\r\n    setFilteredJobs([]);\r\n    setHasSearched(false);\r\n  };\r\n\r\n  // Function for exact match search\r\n  const exactMatch = (text, query) => {\r\n    if (!query || query.trim() === \"\") return true;\r\n\r\n    const formattedText = text.toLowerCase();\r\n    const formattedQuery = query.toLowerCase().trim();\r\n\r\n    const queryWords = formattedQuery.split(/\\s+/);\r\n\r\n    return queryWords.every((word) => {\r\n      const regex = new RegExp(`\\\\b${word}\\\\b`, \"i\");\r\n      return regex.test(formattedText);\r\n    });\r\n  };\r\n\r\n  // Apply filters function\r\n  const applyFilters = () => {\r\n    let results = [...jobListings];\r\n    \r\n    if (searchKeyword && searchKeyword.trim() !== \"\") {\r\n      results = results.filter((job) => exactMatch(job.title, searchKeyword));\r\n    }\r\n\r\n    if (dateFilter === \"Sous 30 jours\") {\r\n      const today = new Date();\r\n      const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\r\n\r\n      results = results.filter((job) => {\r\n        const [day, month, year] = job.date.split(\"/\");\r\n        const jobDate = new Date(year, month - 1, day);\r\n\r\n        return jobDate >= thirtyDaysAgo && jobDate <= today;\r\n      });\r\n    }\r\n\r\n    setFilteredJobs(results);\r\n    setHasSearched(true);\r\n  };\r\n\r\n  // Handle search form submission\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    applyFilters();\r\n  };\r\n\r\n  // Handle date filter change\r\n  const handleDateFilterChange = (newDateFilter) => {\r\n    setDateFilter(newDateFilter);\r\n  };\r\n\r\n  // Apply filters when dateFilter changes\r\n  useEffect(() => {\r\n    if (jobListings.length > 0) {\r\n      applyFilters();\r\n    }\r\n  }, [dateFilter, jobListings]);\r\n\r\n  // Validate name (alphabetic only)\r\n  const validateName = (name, field) => {\r\n    const regex = /^[a-zA-Z√Ä-√ø\\s'-]+$/;\r\n    if (!regex.test(name)) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        [field]: \"Ne doit contenir que des lettres alphab√©tiques\"\r\n      }));\r\n      return false;\r\n    }\r\n    setFormErrors(prev => ({\r\n      ...prev,\r\n      [field]: \"\"\r\n    }));\r\n    return true;\r\n  };\r\n\r\n  // Validate phone number\r\n  const validatePhone = (phone) => {\r\n    const regex = /^[2,5,7,9]\\d{7}$/;\r\n    if (!regex.test(phone)) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        tel: \"Doit contenir 8 chiffres et commencer par 2, 5, 7 ou 9\"\r\n      }));\r\n      return false;\r\n    }\r\n    setFormErrors(prev => ({\r\n      ...prev,\r\n      tel: \"\"\r\n    }));\r\n    return true;\r\n  };\r\n\r\n  // Validate email\r\n  const validateEmail = (email) => {\r\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!regex.test(email)) {\r\n      setFormErrors(prev => ({\r\n        ...prev,\r\n        email: \"Adresse email invalide\"\r\n      }));\r\n      return false;\r\n    }\r\n    setFormErrors(prev => ({\r\n      ...prev,\r\n      email: \"\"\r\n    }));\r\n    return true;\r\n  };\r\n\r\n  // Open application modal\r\n  const openApplicationModal = (job) => {\r\n    setSelectedJob(job);\r\n    setIsModalOpen(true);\r\n    setFileError(\"\");\r\n    setFormData({\r\n      prenom: \"\",\r\n      nom: \"\",\r\n      adresse: \"\",\r\n      email: \"\",\r\n      tel: \"\",\r\n      cv: \"\",\r\n      posteId: job.id,\r\n      posteTitle: job.title\r\n    });\r\n    setFormErrors({\r\n      prenom: \"\",\r\n      nom: \"\",\r\n      tel: \"\",\r\n      email: \"\"\r\n    });\r\n    setSubmitSuccess(false);\r\n    setSubmitError(\"\");\r\n  };\r\n\r\n  // Close modal\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedJob(null);\r\n    setFileName(\"Aucun fichier s√©lectionn√©\");\r\n    setFileError(\"\");\r\n  };\r\n\r\n  // Handle input changes with validation\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    \r\n    setFormData({\r\n      ...formData,\r\n      [name]: value\r\n    });\r\n\r\n    // Validate fields as user types\r\n    switch(name) {\r\n      case 'prenom':\r\n      case 'nom':\r\n        validateName(value, name);\r\n        break;\r\n      case 'tel':\r\n        if (value.length <= 8) { // Only validate if length <= 8\r\n          validatePhone(value);\r\n        }\r\n        break;\r\n      case 'email':\r\n        validateEmail(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Handle file upload with PDF validation\r\n  const handleFileChange = (e) => {\r\n    setFileError(\"\");\r\n    \r\n    if (e.target.files.length > 0) {\r\n      const file = e.target.files[0];\r\n      \r\n      if (file.type !== 'application/pdf') {\r\n        setFileError(\"Erreur: Veuillez ne s√©lectionner que des fichiers PDF.\");\r\n        e.target.value = '';\r\n        setFileName(\"Aucun fichier s√©lectionn√©\");\r\n        setFormData({\r\n          ...formData,\r\n          cv: null\r\n        });\r\n        return;\r\n      }\r\n      \r\n      setFileName(file.name);\r\n      setFormData({\r\n        ...formData,\r\n        cv: file\r\n      });\r\n    } else {\r\n      setFileName(\"Aucun fichier s√©lectionn√©\");\r\n      setFormData({\r\n        ...formData,\r\n        cv: null\r\n      });\r\n    }\r\n  };\r\n\r\n  // Validate all form fields before submission\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n    \r\n    if (!validateName(formData.prenom, 'prenom')) isValid = false;\r\n    if (!validateName(formData.nom, 'nom')) isValid = false;\r\n    if (!validatePhone(formData.tel)) isValid = false;\r\n    if (!validateEmail(formData.email)) isValid = false;\r\n    if (!formData.cv) {\r\n      setFileError(\"Erreur: Veuillez t√©l√©charger votre CV et lettre de motivation.\");\r\n      isValid = false;\r\n    }\r\n    \r\n    return isValid;\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      setIsSubmitting(true);\r\n      \r\n      const formDataToSend = new FormData();\r\n      formDataToSend.append(\"nom\", formData.nom);\r\n      formDataToSend.append(\"prenom\", formData.prenom);\r\n      formDataToSend.append(\"adresse\", formData.adresse);\r\n      formDataToSend.append(\"email\", formData.email);\r\n      formDataToSend.append(\"tel\", formData.tel);\r\n      formDataToSend.append(\"posteId\", formData.posteId); \r\n      formDataToSend.append(\"posteTitle\", formData.posteTitle);\r\n      formDataToSend.append(\"cv\", formData.cv);\r\n      \r\n      const response = await axios.post('/api/addcondidature', formDataToSend, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      \r\n      setSubmitSuccess(true);\r\n      \r\n      setTimeout(() => {\r\n        closeModal();\r\n      }, 2000);\r\n      \r\n    } catch (err) {\r\n      console.error(\"Error submitting application:\", err);\r\n      \r\n      // V√©rification sp√©cifique pour l'erreur de candidature existante\r\n      if (err.response && err.response.data && err.response.data.message === \"Vous avez d√©j√† postul√© √† cette offre.\") {\r\n        setSubmitError(\"Vous avez d√©j√† postul√© √† cette offre.\");\r\n      } else {\r\n        setSubmitError(\"Une erreur s'est produite lors de l'envoi de votre candidature. Veuillez r√©essayer.\");\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const triggerFileInput = () => {\r\n    document.getElementById(\"file-upload-input\").click();\r\n  };\r\n\r\n  const displayedJobs = hasSearched ? filteredJobs : jobListings;\r\n\r\n  const countJobsWithin30Days = () => {\r\n    const today = new Date();\r\n    const thirtyDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 30);\r\n\r\n    return jobListings.filter((job) => {\r\n      const [day, month, year] = job.date.split(\"/\");\r\n      const jobDate = new Date(year, month - 1, day);\r\n      return jobDate >= thirtyDaysAgo && jobDate <= today;\r\n    }).length;\r\n  };\r\n\r\n  const jobsWithin30DaysCount = countJobsWithin30Days();\r\n\r\n  return (\r\n    <div className=\"careers-page\">\r\n      <Navbar />\r\n      \r\n      <div className=\"banner\">\r\n        <div className=\"search-container\">\r\n          <form onSubmit={handleSearch}>\r\n            <div className=\"search-bar\">\r\n              <div className=\"search-input-container\">\r\n                <span className=\"search-icon\">üîç</span>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"search-input\"\r\n                  placeholder=\"Saisissez un titre de poste ou un mot-cl√©\"\r\n                  value={searchKeyword}\r\n                  onChange={(e) => setSearchKeyword(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"search-button\">\r\n                Rechercher\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content-container\">\r\n        <div className=\"filters-container\">\r\n          <div className=\"filters-header\">\r\n            <h2>Filtres</h2>\r\n            <button className=\"reset-button\" onClick={resetFilters}>\r\n              R√©initialiser\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"filter-section\">\r\n            <div className=\"filter-header\" onClick={toggleDateSection}>\r\n              <h3>Date de publication</h3>\r\n              <span className={`arrow ${isDateExpanded ? \"expanded\" : \"\"}`}>\r\n                ‚ñº\r\n              </span>\r\n            </div>\r\n\r\n            {isDateExpanded && (\r\n              <div className=\"filter-options\">\r\n                <label className=\"filter-radio\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"dateFilter\"\r\n                    checked={dateFilter === \"Sous 30 jours\"}\r\n                    onChange={() => handleDateFilterChange(\"Sous 30 jours\")}\r\n                  />\r\n                  Sous 30 jours ({jobsWithin30DaysCount})\r\n                </label>\r\n                <label className=\"filter-radio\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"dateFilter\"\r\n                    checked={dateFilter === \"N'importe quand\"}\r\n                    onChange={() => handleDateFilterChange(\"N'importe quand\")}\r\n                  />\r\n                  N'importe quand ({jobListings.length})\r\n                </label>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"job-listings-container\">\r\n          <h1>Postes √† pourvoir actuellement</h1>\r\n\r\n          {isLoading ? (\r\n            <div className=\"loading-state\">\r\n              <p>Chargement des offres d'emploi...</p>\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"error-state\">\r\n              <p>{error}</p>\r\n              <button \r\n                className=\"retry-button\"\r\n                onClick={() => window.location.reload()}\r\n              >\r\n                R√©essayer\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {hasSearched && (\r\n                <div className=\"search-results-info\">\r\n                  <p>\r\n                    {filteredJobs.length} offre(s) d'emploi trouv√©e(s){\" \"}\r\n                    {searchKeyword && `pour \"${searchKeyword}\"`}\r\n                    {dateFilter === \"Sous 30 jours\" && \" des 30 derniers jours\"}\r\n                  </p>\r\n                  {filteredJobs.length === 0 && (\r\n                    <p className=\"no-results\">\r\n                      Aucun r√©sultat trouv√©. Veuillez essayer d'autres crit√®res de\r\n                      recherche.\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"job-cards\">\r\n                {displayedJobs.length === 0 && !isLoading ? (\r\n                  <p className=\"no-jobs\">Aucune offre d'emploi disponible pour le moment.</p>\r\n                ) : (\r\n                  displayedJobs.map((job) => (\r\n                    <div className=\"job-card\" key={job.id}>\r\n                      <div className=\"job-card-content\">\r\n                        <h3 className=\"job-title\">{job.title}</h3>\r\n                        <div className=\"job-details\">\r\n                          <p className=\"job-location\">{job.location}</p>\r\n                          <p className=\"job-date\">{job.date}</p>\r\n                        </div>\r\n                      </div>\r\n                      <button \r\n                        className=\"postuler-button\"\r\n                        onClick={() => openApplicationModal(job)}\r\n                      >\r\n                        Postuler\r\n                      </button>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {isModalOpen && selectedJob && (\r\n        <div className=\"modal-overlay\" onClick={closeModal}>\r\n          <div \r\n            className=\"modal-content\" \r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <button className=\"modal-close\" onClick={closeModal}>√ó</button>\r\n            <div className=\"modal-title\">\r\n              <h2>Candidature pour {selectedJob.title}</h2>\r\n            </div>\r\n            \r\n            {submitSuccess ? (\r\n              <div className=\"success-message\">\r\n                <p>Votre candidature a √©t√© envoy√©e avec succ√®s!</p>\r\n              </div>\r\n            ) : (\r\n              <form onSubmit={handleSubmit}>\r\n                {submitError && (\r\n                  <div className={`submit-message ${submitError.includes(\"d√©j√† postul√©\") ? \"warning-message\" : \"error-message\"}`}>\r\n                    <p>{submitError}</p>\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"form-section\">\r\n                  <label>Nom complet</label> \r\n                  <div className=\"name-inputs\">\r\n                    <div className=\"input-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        name=\"prenom\" \r\n                        placeholder=\"Pr√©nom\" \r\n                        value={formData.prenom}\r\n                        onChange={handleInputChange}\r\n                        required \r\n                        className={formErrors.prenom ? \"error-input\" : \"\"}\r\n                      />\r\n                      {formErrors.prenom && <span className=\"error-text\">{formErrors.prenom}</span>}\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                      <input \r\n                        type=\"text\" \r\n                        name=\"nom\" \r\n                        placeholder=\"Nom de famille\" \r\n                        value={formData.nom}\r\n                        onChange={handleInputChange}\r\n                        required \r\n                        className={formErrors.nom ? \"error-input\" : \"\"}\r\n                      />\r\n                      {formErrors.nom && <span className=\"error-text\">{formErrors.nom}</span>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-section\">\r\n                  <label>Adresse actuelle</label>\r\n                  <input \r\n                    type=\"text\" \r\n                    name=\"adresse\" \r\n                    placeholder=\"Adresse\" \r\n                    className=\"mb-3\" \r\n                    value={formData.adresse}\r\n                    onChange={handleInputChange}\r\n                    required \r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-section\">\r\n                  <label>Adresse E-mail</label>\r\n                  <div className=\"input-group\">\r\n                    <input \r\n                      type=\"email\" \r\n                      name=\"email\" \r\n                      placeholder=\"Pr√©nom@gmail.com\" \r\n                      value={formData.email}\r\n                      onChange={handleInputChange}\r\n                      required \r\n                      className={formErrors.email ? \"error-input\" : \"\"}\r\n                    />\r\n                    {formErrors.email && <span className=\"error-text\">{formErrors.email}</span>}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-section\">\r\n                  <label>Num√©ro de t√©l√©phone</label>\r\n                  <div className=\"phone-input input-group\">\r\n                    <input \r\n                      type=\"text\" \r\n                      name=\"tel\" \r\n                      placeholder=\"Num√©ro de t√©l√©phone (8 chiffres)\" \r\n                      value={formData.tel}\r\n                      onChange={handleInputChange}\r\n                      required \r\n                      maxLength=\"8\"\r\n                      className={formErrors.tel ? \"error-input\" : \"\"}\r\n                    />\r\n                    {formErrors.tel && <span className=\"error-text\">{formErrors.tel}</span>}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-section\">\r\n                  <label>D√©posez votre CV (format PDF uniquement)</label>\r\n                  <div className={`file-upload ${fileError ? \"file-error\" : \"\"}`} onClick={triggerFileInput}>\r\n                    <input \r\n                      type=\"file\" \r\n                      id=\"file-upload-input\" \r\n                      accept=\".pdf,application/pdf\" \r\n                      onChange={handleFileChange}\r\n                    />\r\n                    <div className=\"file-upload-content\">\r\n                      <span className=\"upload-icon\">üìÅ</span>\r\n                      <span className=\"browse-text\">Parcourir les fichiers PDF</span>\r\n                      <p className=\"selected-files\">{fileName}</p>\r\n                      {fileError && <p className=\"error-message\">{fileError}</p>}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <button \r\n                  type=\"submit\" \r\n                  className=\"submit-application\" \r\n                  disabled={isSubmitting}\r\n                >\r\n                  {isSubmitting ? \"Envoi en cours...\" : \"Postuler\"}\r\n                </button>\r\n              </form>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <style jsx>{`\r\n        * {\r\n          margin: 0;\r\n          padding: 0;\r\n          box-sizing: border-box;\r\n          font-family: Arial, sans-serif;\r\n        }\r\n        \r\n        .careers-page {\r\n          width: 100%;\r\n          background-color: #f5f5f5;\r\n          min-height: 100vh;\r\n        }\r\n        \r\n        .banner {\r\n          width: 100%;\r\n          height: 380px;\r\n          background-image: url('https://ubci.csod.com/clientimg/ubci/careersite/banner/Backgroundpicture_6372a143-698a-40dd-99a1-fcbf9c1d104e.jpg');\r\n          background-size: cover;\r\n          background-position: center;\r\n          position: relative;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n        }\r\n        \r\n        .banner::before {\r\n          content: '';\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: rgba(0, 0, 0, 0.3);\r\n        }\r\n        \r\n        .search-container {\r\n          width: 100%;\r\n          max-width: 800px;\r\n          padding: 0 20px;\r\n          z-index: 10;\r\n        }\r\n        \r\n        .search-bar {\r\n          display: flex;\r\n          background: white;\r\n          border-radius: 4px;\r\n          overflow: hidden;\r\n          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .search-input-container {\r\n          flex: 1;\r\n          display: flex;\r\n          align-items: center;\r\n          padding: 0 15px;\r\n        }\r\n        \r\n        .search-icon {\r\n          margin-right: 10px;\r\n          color: #777;\r\n        }\r\n        \r\n        .search-input {\r\n          flex: 1;\r\n          padding: 15px 0;\r\n          border: none;\r\n          font-size: 16px;\r\n          outline: none;\r\n        }\r\n        \r\n        .search-input:focus {\r\n          outline: none;\r\n          box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\r\n        }\r\n        \r\n        .search-button {\r\n          padding: 0 30px;\r\n          background-color: #0052cc;\r\n          color: white;\r\n          border: none;\r\n          font-size: 16px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s;\r\n        }\r\n        \r\n        .search-button:hover {\r\n          background-color: #003d99;\r\n        }\r\n        \r\n        .content-container {\r\n          display: flex;\r\n          max-width: 1200px;\r\n          margin: 30px auto;\r\n          padding: 0 20px;\r\n        }\r\n        \r\n        .filters-container {\r\n          width: 300px;\r\n          background-color: white;\r\n          border-radius: 4px;\r\n          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n          padding: 15px;\r\n          margin-right: 20px;\r\n          height: fit-content;\r\n        }\r\n        \r\n        .filters-header {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          margin-bottom: 20px;\r\n        }\r\n        \r\n        .filters-header h2 {\r\n          font-size: 18px;\r\n          font-weight: bold;\r\n          color: #333;\r\n        }\r\n        \r\n        .reset-button {\r\n          color: #1a73e8;\r\n          background: none;\r\n          border: none;\r\n          cursor: pointer;\r\n          font-size: 14px;\r\n        }\r\n        \r\n        .filter-section {\r\n          margin-bottom: 15px;\r\n          border-bottom: 1px solid #e0e0e0;\r\n          padding-bottom: 15px;\r\n        }\r\n        \r\n        .filter-header {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          cursor: pointer;\r\n        }\r\n        \r\n        .filter-header h3 {\r\n          font-size: 16px;\r\n          font-weight: normal;\r\n          color: #333;\r\n        }\r\n        \r\n        .arrow {\r\n          font-size: 12px;\r\n          transition: transform 0.3s;\r\n        }\r\n        \r\n        .arrow.expanded {\r\n          transform: rotate(180deg);\r\n        }\r\n        \r\n        .filter-options {\r\n          margin-top: 10px;\r\n        }\r\n        \r\n        .filter-radio {\r\n          display: flex;\r\n          align-items: center;\r\n          margin-bottom: 8px;\r\n          font-size: 14px;\r\n          color: #555;\r\n        }\r\n        \r\n        .filter-radio input {\r\n          margin-right: 8px;\r\n        }\r\n        \r\n        .job-listings-container {\r\n          flex: 1;\r\n        }\r\n        \r\n        .job-listings-container h1 {\r\n          font-size: 22px;\r\n          color: #333;\r\n          margin-bottom: 20px;\r\n          font-weight: normal;\r\n        }\r\n        \r\n        .search-results-info {\r\n          margin-bottom: 15px;\r\n          font-size: 14px;\r\n          color: #555;\r\n        }\r\n        \r\n        .no-results {\r\n          color: #d32f2f;\r\n          margin-top: 5px;\r\n        }\r\n        \r\n        .job-cards {\r\n          display: flex;\r\n          flex-direction: column;\r\n        }\r\n        \r\n        .job-card {\r\n          background-color: white;\r\n          border-radius: 4px;\r\n          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n          padding: 15px;\r\n          margin-bottom: 10px;\r\n          cursor: pointer;\r\n          transition: transform 0.2s;\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n        }\r\n        \r\n        .job-card:hover {\r\n          transform: translateY(-2px);\r\n          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);\r\n        }\r\n        \r\n        .job-title {\r\n          color: #1a73e8;\r\n          font-size: 16px;\r\n          margin-bottom: 8px;\r\n          font-weight: normal;\r\n        }\r\n        \r\n        .job-details {\r\n          display: flex;\r\n          flex-direction: column;\r\n        }\r\n        \r\n        .job-location, .job-date {\r\n          font-size: 14px;\r\n          color: #555;\r\n          margin-bottom: 3px;\r\n        }\r\n\r\n        .postuler-button {\r\n          background-color:#2563eb;\r\n          color: white;\r\n          border: none;\r\n          padding: 10px 20px;\r\n          border-radius: 4px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s;\r\n        }\r\n\r\n        .postuler-button:hover {\r\n          background-color: #2563eb;\r\n        }\r\n\r\n        .loading-state, .error-state, .no-jobs {\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          flex-direction: column;\r\n          padding: 40px 0;\r\n          color: #555;\r\n          font-size: 16px;\r\n        }\r\n\r\n        .error-state {\r\n          color: #d32f2f;\r\n        }\r\n\r\n        .retry-button {\r\n          margin-top: 15px;\r\n          padding: 8px 16px;\r\n          background-color: #1a73e8;\r\n          color: white;\r\n          border: none;\r\n          border-radius: 4px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s;\r\n        }\r\n\r\n        .retry-button:hover {\r\n          background-color: #0d47a1;\r\n        }\r\n\r\n        .modal-overlay {\r\n          position: fixed;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          background: rgba(0, 0, 0, 0.5);\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          z-index: 1000;\r\n        }\r\n\r\n        .modal-content {\r\n          background: white;\r\n          padding: 30px;\r\n          border-radius: 8px;\r\n          width: 100%;\r\n          max-width: 600px;\r\n          max-height: 80vh;\r\n          overflow-y: auto;\r\n          position: relative;\r\n        }\r\n\r\n        .modal-close {\r\n          position: absolute;\r\n          top: 10px;\r\n          right: 10px;\r\n          font-size: 24px;\r\n          background: none;\r\n          border: none;\r\n          cursor: pointer;\r\n          z-index: 1001;\r\n        }\r\n\r\n        .modal-title {\r\n          text-align: center;\r\n          margin-bottom: 25px;\r\n          padding-bottom: 15px;\r\n        }\r\n\r\n        .modal-title h2 {\r\n          font-size: 22px;\r\n          color: #1a73e8;\r\n          font-weight: bold;\r\n        }\r\n\r\n        .form-section {\r\n          margin-bottom: 25px;\r\n        }\r\n\r\n        .form-section label {\r\n          display: block;\r\n          margin-bottom: 10px;\r\n          font-weight: bold;\r\n          color: #333;\r\n        }\r\n\r\n        .form-section input,\r\n        .form-section select {\r\n          width: 100%;\r\n          padding: 12px;\r\n          border: 1px solid #ddd;\r\n          border-radius: 4px;\r\n          font-size: 14px;\r\n        }\r\n\r\n        .form-section input:focus,\r\n        .form-section select:focus {\r\n          outline: none;\r\n          border-color: #1a73e8;\r\n          box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);\r\n        }\r\n\r\n        .error-input {\r\n          border-color: #d32f2f !important;\r\n        }\r\n\r\n        .error-text {\r\n          color: #d32f2f;\r\n          font-size: 12px;\r\n          margin-top: 5px;\r\n          display: block;\r\n        }\r\n\r\n        .input-group {\r\n          margin-bottom: 10px;\r\n        }\r\n\r\n        .name-inputs,\r\n        .address-details,\r\n        .phone-input {\r\n          display: flex;\r\n          gap: 15px;\r\n        }\r\n\r\n        .name-inputs input,\r\n        .address-details input,\r\n        .phone-input input,\r\n        .phone-input select {\r\n          flex: 1;\r\n        }\r\n\r\n        .file-upload {\r\n          border: 2px dashed #1a73e8;\r\n          padding: 20px;\r\n          text-align: center;\r\n          cursor: pointer;\r\n          border-radius: 4px;\r\n          background-color: #f5f9ff;\r\n          transition: all 0.3s ease;\r\n        }\r\n\r\n        .file-upload.file-error {\r\n          border-color: #d32f2f;\r\n          background-color: #fff5f5;\r\n        }\r\n\r\n        .file-upload input[type=\"file\"] {\r\n          display: none;\r\n        }\r\n\r\n        .file-upload-content {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          gap: 10px;\r\n        }\r\n\r\n        .upload-icon {\r\n          font-size: 24px;\r\n          color: #1a73e8;\r\n        }\r\n\r\n        .browse-text {\r\n          color: #1a73e8;\r\n          font-weight: bold;\r\n          font-size: 16px;\r\n        }\r\n\r\n        .selected-files {\r\n          font-size: 14px;\r\n          color: #555;\r\n          margin-top: 5px;\r\n          word-break: break-word;\r\n        }\r\n\r\n        .error-message {\r\n          color: #d32f2f;\r\n          font-size: 14px;\r\n          margin-top: 5px;\r\n        }\r\n\r\n        .submit-application {\r\n          width: 100%;\r\n          padding: 15px;\r\n          background-color: #1a73e8;\r\n          color: white;\r\n          border: none;\r\n          border-radius: 4px;\r\n          cursor: pointer;\r\n          transition: background-color 0.3s;\r\n          font-size: 16px;\r\n          font-weight: bold;\r\n        }\r\n\r\n        .submit-application:hover {\r\n          background-color: #0d47a1;\r\n        }\r\n\r\n        .submit-application:disabled {\r\n          background-color: #cccccc;\r\n          cursor: not-allowed;\r\n        }\r\n\r\n        /* Messages styles */\r\n        .success-message {\r\n          background-color: #d4edda;\r\n          color: #155724;\r\n          padding: 15px;\r\n          border-radius: 4px;\r\n          margin-bottom: 20px;\r\n          text-align: center;\r\n        }\r\n\r\n        .submit-message {\r\n          padding: 15px;\r\n          border-radius: 4px;\r\n          margin-bottom: 20px;\r\n          text-align: center;\r\n        }\r\n\r\n        .error-message {\r\n          background-color: #f8d7da;\r\n          color: #721c24;\r\n        }\r\n\r\n        .warning-message {\r\n          background-color: #fff3cd;\r\n          color: #856404;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n          .search-bar {\r\n            flex-direction: column;\r\n          }\r\n          \r\n          .search-button {\r\n            padding: 15px 0;\r\n          }\r\n          \r\n          .content-container {\r\n            flex-direction: column;\r\n          }\r\n          \r\n          .filters-container {\r\n            width: 100%;\r\n            margin-right: 0;\r\n            margin-bottom: 20px;\r\n          }\r\n          \r\n          .job-listings-container {\r\n            width: 100%;\r\n          }\r\n\r\n          .name-inputs,\r\n          .address-details,\r\n          .phone-input {\r\n            flex-direction: column;\r\n            gap: 10px;\r\n          }\r\n\r\n          .modal-content {\r\n            padding: 20px;\r\n            max-height: 90vh;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Postule;","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Forget.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Signin.js",["210","211","212"],"import React, { useState } from 'react';\r\nimport './Auth.css';\r\nimport Navbar from 'components/Navbars/IndexNavbar';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Signin = () => {\r\n  const history = useHistory();\r\n  const [mode, setMode] = useState('login');\r\n  const [credentials, setCredentials] = useState({\r\n    email: '',\r\n    password: ''\r\n  });\r\n  const [forgotEmail, setForgotEmail] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [loginMessage, setLoginMessage] = useState('');\r\n  const [loginSuccess, setLoginSuccess] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [toastType, setToastType] = useState('success');\r\n\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePassword = (password) => {\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setCredentials({\r\n      ...credentials,\r\n      [name]: value\r\n    });\r\n    setError('');\r\n    setLoginMessage('');\r\n    setLoginSuccess(false);\r\n    setShowAlert(false);\r\n  };\r\n  \r\n  const handleForgotEmailChange = (e) => {\r\n    setForgotEmail(e.target.value);\r\n    setError('');\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setLoginMessage('');\r\n    setShowAlert(false);\r\n    \r\n    if (!credentials.email) {\r\n      setError('Veuillez saisir votre adresse email.');\r\n      return;\r\n    }\r\n    \r\n    if (!credentials.password) {\r\n      setError('Veuillez saisir votre mot de passe.');\r\n      return;\r\n    }\r\n    \r\n    if (!validateEmail(credentials.email)) {\r\n      setError('Veuillez saisir une adresse email valide.');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const apiUrl = '/api/login'; \r\n      console.log('Sending login request to:', apiUrl);\r\n      \r\n      const response = await axios.post(apiUrl, credentials);\r\n      console.log('Login response:', response.data);\r\n      \r\n      setIsLoading(false);\r\n      setLoginSuccess(true);\r\n      \r\n      if (response.data && response.data.personnel) {\r\n        localStorage.setItem('userData', JSON.stringify(response.data.personnel));\r\n        const role = response.data.personnel.role || 'inconnu';\r\n        const message = `Utilisateur existe. R√¥le: ${role}`;\r\n        setLoginMessage(message);\r\n        \r\n        setTimeout(() => {\r\n          if (role.toLowerCase() === 'personnel') {\r\n            history.push('/employe');\r\n          } else if (role.toLowerCase() === 'drh') {\r\n            history.push('/admin');\r\n          } else {\r\n            console.log('Unknown role:', role);\r\n          }\r\n        }, 1000);\r\n      } else {\r\n        const message = 'Utilisateur existe.';\r\n        setLoginMessage(message);\r\n        setShowAlert(true);\r\n      }\r\n      \r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      setLoginSuccess(false);\r\n      \r\n      console.error('Login error:', err);\r\n      \r\n      let errorMessage = \"Erreur de connexion. Veuillez r√©essayer.\";\r\n      \r\n      if (err.response) {\r\n        console.log('Error response:', err.response);\r\n        \r\n        if (err.response.data && err.response.data.message) {\r\n          if (err.response.data.message.includes(\"Incorrect email\")) {\r\n            errorMessage = \"Utilisateur n'existe pas.\";\r\n          } else if (err.response.data.message.includes(\"Incorrect Password\")) {\r\n            errorMessage = \"Mot de passe incorrect.\";\r\n          } else {\r\n            errorMessage = err.response.data.message;\r\n          }\r\n        } else if (err.response.status === 404) {\r\n          errorMessage = \"Service non trouv√©. V√©rifiez l'URL de l'API.\";\r\n        } else if (err.response.status === 500) {\r\n          errorMessage = \"Erreur serveur. Veuillez r√©essayer plus tard.\";\r\n        }\r\n      } else if (err.request) {\r\n        errorMessage = \"Aucune r√©ponse du serveur. V√©rifiez votre connexion.\";\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n  \r\n  const handleForgotPassword = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setShowAlert(false);\r\n    \r\n    if (!forgotEmail) {\r\n      setError('Veuillez saisir votre adresse email.');\r\n      setShowAlert(true);\r\n      return;\r\n    }\r\n    \r\n    if (!validateEmail(forgotEmail)) {\r\n      setError('Veuillez saisir une adresse email valide.');\r\n      setShowAlert(true);\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const response = await axios.post('/api/forgot-password', { email: forgotEmail });\r\n      \r\n      if (response.data.success) {\r\n        setToastType('success');\r\n        setToastMessage(response.data.message);\r\n      } else {\r\n        setToastType('error');\r\n        setToastMessage(response.data.message);\r\n      }\r\n      setShowToast(true);\r\n      \r\n      if (response.data.success) {\r\n        setTimeout(() => {\r\n          setShowToast(false);\r\n          setMode('login');\r\n          setForgotEmail('');\r\n        }, 5000);\r\n      } else {\r\n        setTimeout(() => {\r\n          setShowToast(false);\r\n        }, 5000);\r\n      }\r\n      \r\n    } catch (err) {\r\n      let errorMessage = \"Erreur lors de la r√©initialisation. Veuillez r√©essayer.\";\r\n      \r\n      if (err.response) {\r\n        switch(err.response.status) {\r\n          case 400:\r\n            errorMessage = \"Adresse email invalide\";\r\n            break;\r\n          case 404:\r\n            errorMessage = \"Aucun compte trouv√© avec cette adresse email\";\r\n            break;\r\n          case 500:\r\n            errorMessage = \"Erreur serveur. Veuillez r√©essayer plus tard\";\r\n            break;\r\n          default:\r\n            errorMessage = err.response.data?.message || errorMessage;\r\n        }\r\n      } else if (err.request) {\r\n        errorMessage = \"Pas de r√©ponse du serveur. V√©rifiez votre connexion.\";\r\n      }\r\n      \r\n      setToastType('error');\r\n      setToastMessage(errorMessage);\r\n      setShowToast(true);\r\n      \r\n      setTimeout(() => {\r\n        setShowToast(false);\r\n      }, 5000);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('userData');\r\n    history.push('/signin');\r\n  };\r\n\r\n  const Alert = ({ message, type, onClose }) => {\r\n    return (\r\n      <div className={`custom-alert ${type}-alert`}>\r\n        <span>{message}</span>\r\n        <button className=\"close-alert\" onClick={onClose}>√ó</button>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const Toast = ({ message, type, onClose }) => {\r\n    return (\r\n      <div className={`toast-notification ${type}-toast`}>\r\n        <div className=\"toast-content\">\r\n          {type === 'success' && (\r\n            <div className=\"toast-icon success\">\r\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" fill=\"currentColor\"/>\r\n              </svg>\r\n            </div>\r\n          )}\r\n          {type === 'error' && (\r\n            <div className=\"toast-icon error\">\r\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\" fill=\"currentColor\"/>\r\n              </svg>\r\n            </div>\r\n          )}\r\n          <div className=\"toast-message\">{message}</div>\r\n        </div>\r\n        <button className=\"toast-close\" onClick={onClose}>√ó</button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      <div className=\"login-page\">\r\n        <div className=\"login-content\">\r\n          <div className=\"login-left-panel\"></div>\r\n          \r\n          <div className=\"login-right-panel\">\r\n            <div className=\"login-form-wrapper\">\r\n              <div className=\"login-header\">\r\n                <h3 className=\"login-title\">\r\n                  {mode === 'login' ? 'Connectez-vous √† votre compte' : 'R√©initialisation du mot de passe'}\r\n                </h3>\r\n                <p className=\"login-subtitle\">\r\n                  {mode === 'login' ? \r\n                    '' : \r\n                    ''}\r\n                </p>\r\n              </div>\r\n              \r\n              {error && <Alert message={error} type=\"error\" onClose={() => setError('')} />}\r\n              \r\n              {showAlert && loginSuccess && loginMessage && (\r\n                <Alert \r\n                  message={loginMessage} \r\n                  type=\"success\" \r\n                  onClose={() => setShowAlert(false)} \r\n                />\r\n              )}\r\n              \r\n              {showToast && (\r\n                <Toast \r\n                  message={toastMessage} \r\n                  type={toastType} \r\n                  onClose={() => setShowToast(false)} \r\n                />\r\n              )}\r\n              \r\n              {mode === 'login' ? (\r\n                <form onSubmit={handleSubmit} className=\"auth-form\">\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <div className=\"input-container\">\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        value={credentials.email}\r\n                        onChange={handleChange}\r\n                        placeholder=\"Entrez votre adresse email\"\r\n                        disabled={isLoading}\r\n                      />\r\n                      <div className=\"input-icon\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                          <path d=\"M20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 18H4V8L12 13L20 8V18ZM12 11L4 6H20L12 11Z\" fill=\"currentColor\"/>\r\n                        </svg>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"input-group\">\r\n                    <div className=\"label-row\">\r\n                      <label htmlFor=\"password\">Mot de passe</label>\r\n                      <a \r\n                        href=\"#\" \r\n                        className=\"forgot-link\"\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          setMode('forgot');\r\n                        }}\r\n                      >\r\n                        Oubli√©?\r\n                      </a>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                      <input\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        value={credentials.password}\r\n                        onChange={handleChange}\r\n                        placeholder=\"Entrez votre mot de passe\"\r\n                        disabled={isLoading}\r\n                      />\r\n                      <div className=\"input-icon\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                          <path d=\"M18 8H17V6C17 3.24 14.76 1 12 1C9.24 1 7 3.24 7 6V8H6C4.9 8 4 8.9 4 10V20C4 21.1 4.9 22 6 22H18C19.1 22 20 21.1 20 20V10C20 8.9 19.1 8 18 8ZM12 17C10.9 17 10 16.1 10 15C10 13.9 10.9 13 12 13C13.1 13 14 13.9 14 15C14 16.1 13.1 17 12 17ZM15 8H9V6C9 4.34 10.34 3 12 3C13.66 3 15 4.34 15 6V8Z\" fill=\"currentColor\"/>\r\n                        </svg>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"remember-option\">\r\n                    <label className=\"checkbox-container\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={showPassword}\r\n                        onChange={() => setShowPassword(!showPassword)}\r\n                        disabled={isLoading}\r\n                      />\r\n                      <span className=\"checkmark\"></span>\r\n                      <span>Afficher le Mot de passe</span>\r\n                    </label>\r\n                  </div>\r\n                  \r\n                  <button \r\n                    type=\"submit\" \r\n                    className={`sign-in-btn ${isLoading ? 'loading' : ''}`}\r\n                    disabled={isLoading}\r\n                  >\r\n                    {isLoading ? 'Connexion...' : 'Se connecter'}\r\n                  </button>\r\n                </form>\r\n              ) : (\r\n                <form onSubmit={handleForgotPassword} className=\"forgot-password-form\">\r\n                  <div className=\"input-group\">\r\n                    <label htmlFor=\"forgotEmail\">Email</label>\r\n                    <div className=\"input-container\">\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"forgotEmail\"\r\n                        name=\"forgotEmail\"\r\n                        value={forgotEmail}\r\n                        onChange={handleForgotEmailChange}\r\n                        placeholder=\"Entrez votre adresse email\"\r\n                        disabled={isLoading}\r\n                      />\r\n                      <div className=\"input-icon\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                          <path d=\"M20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 18H4V8L12 13L20 8V18ZM12 11L4 6H20L12 11Z\" fill=\"currentColor\"/>\r\n                        </svg>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"forgot-actions\">\r\n                    <button \r\n                      type=\"button\" \r\n                      className=\"back-btn\"\r\n                      onClick={() => setMode('login')}\r\n                      disabled={isLoading}\r\n                    >\r\n                      Retour\r\n                    </button>\r\n                    \r\n                    <button \r\n                      type=\"submit\" \r\n                      className={`forgot-btn ${isLoading ? 'loading' : ''}`}\r\n                      disabled={isLoading}\r\n                    >\r\n                      {isLoading ? 'Envoi...' : 'Envoyer un mail'}\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              )}\r\n              \r\n              <div className=\"help-link\">\r\n                <p>Besoin d'aide? <a href=\"mailto:it-support@ubci.com\">Contactez le support</a></p>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"footer\">\r\n              <p>&copy; {new Date().getFullYear()} UBCI. Tous droits r√©serv√©s.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signin;","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Dashboard.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Maps.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Settings.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Tables.js",["213"],"import { useState, useEffect } from \"react\";\r\nimport { Search, AlertCircle, Check, X, Eye } from \"lucide-react\";\r\n\r\n\r\nconst encapsulatedStyles = `\r\n  .gav-container {\r\n    background: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n  \r\n  .gav-header-section {\r\n    padding: 1.5rem;\r\n    border-bottom: 1px solid #e2e8f0;\r\n  }\r\n  \r\n  .gav-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 700;\r\n    margin-bottom: 1.5rem;\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gav-search-container {\r\n    position: relative;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .gav-search-icon {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: #9ca3af;\r\n  }\r\n  \r\n  .gav-search-input {\r\n    width: 100%;\r\n    padding: 0.5rem 0.75rem 0.5rem 2.5rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .gav-search-input:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gav-table-container {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .gav-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  .gav-th {\r\n    text-align: left;\r\n    padding: 0.75rem 1rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    color: #6b7280;\r\n    background-color: #f9fafb;\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gav-td {\r\n    padding: 1rem;\r\n    vertical-align: middle;\r\n    color: #374151;\r\n    border-bottom: 1px solid #f3f4f6;\r\n  }\r\n  \r\n  .gav-tr {\r\n    transition: background-color 0.2s ease;\r\n  }\r\n  \r\n  .gav-tr:hover {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .gav-employee-name {\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-employee-dept {\r\n    font-size: 0.75rem;\r\n    color: #6b7280;\r\n    margin-top: 0.25rem;\r\n  }\r\n  \r\n  .gav-amount {\r\n    font-size: 0.875rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-date {\r\n    font-size: 0.75rem;\r\n    color: #6b7280;\r\n    margin-top: 0.25rem;\r\n  }\r\n  \r\n  .gav-badge {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .gav-badge-standard {\r\n    background-color: #dbeafe;\r\n    color: #1e40af;\r\n  }\r\n  \r\n  .gav-badge-urgent {\r\n    background-color: #ede9fe;\r\n    color: #5b21b6;\r\n  }\r\n  \r\n  .gav-status-badge {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.25rem;\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    width: fit-content;\r\n  }\r\n  \r\n  .gav-status-approved {\r\n    background-color: #dcfce7;\r\n    color: #166534;\r\n  }\r\n  \r\n  .gav-status-pending {\r\n    background-color: #fef3c7;\r\n    color: #92400e;\r\n  }\r\n  \r\n  .gav-status-rejected {\r\n    background-color: #fee2e2;\r\n    color: #b91c1c;\r\n  }\r\n  \r\n  .gav-view-button {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: 0.25rem;\r\n    padding: 0.375rem 0.75rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    color: #4b5563;\r\n    background-color: white;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-view-button:hover {\r\n    background-color: #f9fafb;\r\n    border-color: #9ca3af;\r\n  }\r\n  \r\n  .gav-view-button:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    ring: 2px solid #14b8a6;\r\n  }\r\n  \r\n  .gav-motif-popup {\r\n    position: absolute;\r\n    z-index: 10;\r\n    margin-top: 0.5rem;\r\n    width: 18rem;\r\n    background-color: white;\r\n    border: 1px solid #e5e7eb;\r\n    border-radius: 0.375rem;\r\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n    padding: 1rem;\r\n    font-size: 0.875rem;\r\n    color: #374151;\r\n  }\r\n  \r\n  .gav-motif-title {\r\n    font-size: 0.875rem;\r\n    font-weight: 600;\r\n    margin-bottom: 0.5rem;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-motif-text {\r\n    font-size: 0.875rem;\r\n    line-height: 1.25rem;\r\n    color: #4b5563;\r\n  }\r\n  \r\n  .gav-response-title {\r\n    font-size: 0.875rem;\r\n    font-weight: 600;\r\n    margin-top: 0.75rem;\r\n    margin-bottom: 0.25rem;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-response-text {\r\n    font-style: italic;\r\n    font-size: 0.875rem;\r\n    line-height: 1.25rem;\r\n    color: #4b5563;\r\n  }\r\n  \r\n  .gav-footer {\r\n    padding: 1rem;\r\n    background-color: #f9fafb;\r\n    border-top: 1px solid #e5e7eb;\r\n    font-size: 0.875rem;\r\n    color: #6b7280;\r\n  }\r\n  \r\n  /* Styles pour les actions */\r\n  .gav-actions {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .gav-action-button {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 1.75rem;\r\n    height: 1.75rem;\r\n    border-radius: 0.375rem;\r\n    color: #6b7280;\r\n    background-color: white;\r\n    border: 1px solid #e5e7eb;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-action-button:hover {\r\n    background-color: #f9fafb;\r\n    color: #111827;\r\n    border-color: #d1d5db;\r\n  }\r\n  \r\n  .gav-action-button-edit:hover {\r\n    color: #2563eb;\r\n    background-color: #eff6ff;\r\n    border-color: #bfdbfe;\r\n  }\r\n  \r\n  .gav-action-button-approve {\r\n    color: #047857;\r\n  }\r\n  \r\n  .gav-action-button-approve:hover {\r\n    color: #047857;\r\n    background-color: #ecfdf5;\r\n    border-color: #a7f3d0;\r\n  }\r\n  \r\n  .gav-action-button-reject {\r\n    color: #b91c1c;\r\n  }\r\n  \r\n  .gav-action-button-reject:hover {\r\n    color: #dc2626;\r\n    background-color: #fef2f2;\r\n    border-color: #fecaca;\r\n  }\r\n  \r\n  .gav-action-button-more {\r\n    position: relative;\r\n  }\r\n  \r\n  /* Styles pour le modal */\r\n  .gav-modal-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gav-modal {\r\n    background-color: white;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n    width: 90%;\r\n    max-width: 32rem;\r\n    max-height: 90vh;\r\n    overflow-y: auto;\r\n    z-index: 60;\r\n  }\r\n  \r\n  .gav-modal-header {\r\n    padding: 1rem 1.5rem;\r\n    border-bottom: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .gav-modal-title {\r\n    font-size: 1.25rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-close {\r\n    background: none;\r\n    border: none;\r\n    color: #6b7280;\r\n    cursor: pointer;\r\n    width: 2rem;\r\n    height: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-modal-close:hover {\r\n    background-color: #f3f4f6;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-body {\r\n    padding: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-section {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-section:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .gav-modal-section-title {\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .gav-modal-section-content {\r\n    font-size: 0.875rem;\r\n    line-height: 1.5;\r\n    color: #4b5563;\r\n    background-color: #f9fafb;\r\n    padding: 1rem;\r\n    border-radius: 0.375rem;\r\n    border: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gav-modal-info-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-info-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n  }\r\n  \r\n  .gav-modal-info-label {\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    color: #6b7280;\r\n  }\r\n  \r\n  .gav-modal-info-value {\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-footer {\r\n    padding: 1rem 1.5rem;\r\n    border-top: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .gav-modal-button {\r\n    padding: 0.5rem 1rem;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    border-radius: 0.375rem;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-modal-button-secondary {\r\n    background-color: white;\r\n    color: #4b5563;\r\n    border: 1px solid #d1d5db;\r\n  }\r\n  \r\n  .gav-modal-button-secondary:hover {\r\n    background-color: #f9fafb;\r\n    border-color: #9ca3af;\r\n  }\r\n  \r\n  .gav-modal-button-primary {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border: 1px solid transparent;\r\n  }\r\n  \r\n  .gav-modal-button-primary:hover {\r\n    background-color: #0d9488;\r\n  }\r\n\r\n  .gav-loading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 2rem;\r\n    font-size: 1rem;\r\n    color: #6b7280;\r\n  }\r\n\r\n  .gav-error {\r\n    padding: 1rem;\r\n    background-color: #fee2e2;\r\n    color: #b91c1c;\r\n    border-radius: 0.375rem;\r\n    margin: 1rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function GestionAvances() {\r\n  // Donn√©es statiques pour les demandes d'avance\r\n  const staticDemandes = [\r\n    {\r\n      _id: \"1\",\r\n      personnel: \"1\",\r\n      montant: 1200,\r\n      typeDemande: \"Standard\",\r\n      statut: \"pending\",\r\n      motif: \"Avance sur salaire pour frais m√©dicaux\",\r\n      createdAt: \"2023-05-15T09:30:00Z\",\r\n      reponse: \"\"\r\n    },\r\n    {\r\n      _id: \"2\",\r\n      personnel: \"2\",\r\n      montant: 800,\r\n      typeDemande: \"Urgente\",\r\n      statut: \"approved\",\r\n      motif: \"R√©paration urgente de voiture pour pouvoir se rendre au travail\",\r\n      createdAt: \"2023-05-10T14:15:00Z\",\r\n      reponse: \"Demande approuv√©e le 12/05/2023\"\r\n    },\r\n    {\r\n      _id: \"3\",\r\n      personnel: \"3\",\r\n      montant: 1500,\r\n      typeDemande: \"Standard\",\r\n      statut: \"rejected\",\r\n      motif: \"Achat de mat√©riel informatique pour t√©l√©travail\",\r\n      createdAt: \"2023-05-05T11:20:00Z\",\r\n      reponse: \"Demande refus√©e le 07/05/2023 - Le mat√©riel doit √™tre fourni par l'entreprise\"\r\n    },\r\n    {\r\n      _id: \"4\",\r\n      personnel: \"4\",\r\n      montant: 600,\r\n      typeDemande: \"Urgente\",\r\n      statut: \"pending\",\r\n      motif: \"Frais de garde d'enfants impr√©vus\",\r\n      createdAt: \"2023-05-18T16:45:00Z\",\r\n      reponse: \"\"\r\n    },\r\n    {\r\n      _id: \"5\",\r\n      personnel: \"5\",\r\n      montant: 900,\r\n      typeDemande: \"Standard\",\r\n      statut: \"approved\",\r\n      motif: \"Avance pour r√®glement de factures √©nerg√©tiques\",\r\n      createdAt: \"2023-04-28T10:10:00Z\",\r\n      reponse: \"Demande approuv√©e le 30/04/2023\"\r\n    }\r\n  ];\r\n\r\n  // Donn√©es statiques pour les employ√©s\r\n  const staticPersonnelDetails = {\r\n    \"1\": {\r\n      nom: \"Dupont\",\r\n      prenom: \"Jean\",\r\n      role: \"D√©veloppeur\"\r\n    },\r\n    \"2\": {\r\n      nom: \"Martin\",\r\n      prenom: \"Sophie\",\r\n      role: \"Chef de projet\"\r\n    },\r\n    \"3\": {\r\n      nom: \"Bernard\",\r\n      prenom: \"Pierre\",\r\n      role: \"Designer\"\r\n    },\r\n    \"4\": {\r\n      nom: \"Petit\",\r\n      prenom: \"Marie\",\r\n      role: \"RH\"\r\n    },\r\n    \"5\": {\r\n      nom: \"Leroy\",\r\n      prenom: \"Thomas\",\r\n      role: \"Commercial\"\r\n    }\r\n  };\r\n\r\n  const [demandes, setDemandes] = useState(staticDemandes);\r\n  const [demandesFiltrees, setDemandesFiltrees] = useState(staticDemandes);\r\n  const [recherche, setRecherche] = useState(\"\");\r\n  const [demandeSelected, setDemandeSelected] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [personnelDetails] = useState(staticPersonnelDetails);\r\n\r\n  // Formater la date pour l'affichage\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('fr-FR');\r\n  };\r\n\r\n  // Filtrage des demandes bas√© sur la recherche\r\n  const filtrerDemandes = (terme) => {\r\n    setRecherche(terme);\r\n    if (!terme.trim()) {\r\n      setDemandesFiltrees(demandes);\r\n      return;\r\n    }\r\n    \r\n    const termeLower = terme.toLowerCase();\r\n    const resultats = demandes.filter(demande => {\r\n      const personnel = personnelDetails[demande.personnel];\r\n      if (!personnel) return false;\r\n      \r\n      return (\r\n        (personnel.nom && personnel.nom.toLowerCase().includes(termeLower)) ||\r\n        (personnel.prenom && personnel.prenom.toLowerCase().includes(termeLower)) ||\r\n        demande.montant.toString().includes(terme)\r\n      );\r\n    });\r\n    \r\n    setDemandesFiltrees(resultats);\r\n  };\r\n\r\n  // Ouvrir le modal avec les d√©tails de la demande\r\n  const ouvrirModal = (demande) => {\r\n    setDemandeSelected(demande);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  // Fermer le modal\r\n  const fermerModal = () => {\r\n    setModalVisible(false);\r\n    setDemandeSelected(null);\r\n  };\r\n\r\n  // Fermer le modal si on clique √† l'ext√©rieur\r\n  useEffect(() => {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape') {\r\n        fermerModal();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleEscape);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleEscape);\r\n    };\r\n  }, []);\r\n\r\n  // Mapping des statuts API vers les statuts d'affichage\r\n  const mapStatus = (status) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return 'Compl√©t√©';\r\n      case 'pending':\r\n        return 'En attente';\r\n      case 'rejected':\r\n        return 'Refus√©';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  // Actions des boutons \r\n  const handleApprove = (id) => {\r\n    try {\r\n      // Mise √† jour de l'√©tat local\r\n      const demandesUpdated = demandes.map(demande => {\r\n        if (demande._id === id) {\r\n          return {\r\n            ...demande, \r\n            statut: 'approved', \r\n            reponse: `Demande approuv√©e le ${new Date().toLocaleDateString('fr-FR')}`\r\n          };\r\n        }\r\n        return demande;\r\n      });\r\n      \r\n      setDemandes(demandesUpdated);\r\n      setDemandesFiltrees(\r\n        demandesUpdated.filter(demande => {\r\n          if (recherche.trim() === \"\") return true;\r\n          \r\n          const personnel = personnelDetails[demande.personnel];\r\n          if (!personnel) return false;\r\n          \r\n          const termeLower = recherche.toLowerCase();\r\n          return (\r\n            (personnel.nom && personnel.nom.toLowerCase().includes(termeLower)) ||\r\n            (personnel.prenom && personnel.prenom.toLowerCase().includes(termeLower)) ||\r\n            demande.montant.toString().includes(recherche)\r\n          );\r\n        })\r\n      );\r\n      \r\n      alert(`La demande d'avance a √©t√© approuv√©e.`);\r\n    } catch (err) {\r\n      console.error(\"Erreur lors de l'approbation:\", err);\r\n      alert(\"Erreur lors de l'approbation de la demande.\");\r\n    }\r\n  };\r\n\r\n  const handleReject = (id) => {\r\n    try {\r\n      // Mise √† jour de l'√©tat local\r\n      const demandesUpdated = demandes.map(demande => {\r\n        if (demande._id === id) {\r\n          return {\r\n            ...demande, \r\n            statut: 'rejected', \r\n            reponse: `Demande refus√©e le ${new Date().toLocaleDateString('fr-FR')}`\r\n          };\r\n        }\r\n        return demande;\r\n      });\r\n      \r\n      setDemandes(demandesUpdated);\r\n      setDemandesFiltrees(\r\n        demandesUpdated.filter(demande => {\r\n          if (recherche.trim() === \"\") return true;\r\n          \r\n          const personnel = personnelDetails[demande.personnel];\r\n          if (!personnel) return false;\r\n          \r\n          const termeLower = recherche.toLowerCase();\r\n          return (\r\n            (personnel.nom && personnel.nom.toLowerCase().includes(termeLower)) ||\r\n            (personnel.prenom && personnel.prenom.toLowerCase().includes(termeLower)) ||\r\n            demande.montant.toString().includes(recherche)\r\n          );\r\n        })\r\n      );\r\n      \r\n      alert(`La demande d'avance a √©t√© refus√©e.`);\r\n    } catch (err) {\r\n      console.error(\"Erreur lors du refus:\", err);\r\n      alert(\"Erreur lors du refus de la demande.\");\r\n    }\r\n  };\r\n\r\n  // Rendu du statut avec l'ic√¥ne appropri√©e\r\n  const renderStatus = (status) => {\r\n    const displayStatus = mapStatus(status);\r\n    \r\n    switch (displayStatus) {\r\n      case \"Compl√©t√©\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-approved\">\r\n            <Check size={14} />\r\n            <span>Approuv√©</span>\r\n          </div>\r\n        );\r\n      case \"En attente\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-pending\">\r\n            <AlertCircle size={14} />\r\n            <span>En attente</span>\r\n          </div>\r\n        );\r\n      case \"Refus√©\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-rejected\">\r\n            <X size={14} />\r\n            <span>Refus√©</span>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Afficher l'employ√© avec les d√©tails r√©cup√©r√©s\r\n  const renderEmploye = (personnelId) => {\r\n    const personnel = personnelDetails[personnelId];\r\n    \r\n    if (!personnel) {\r\n      return (\r\n        <>\r\n          <div className=\"gav-employee-name\">Employ√© inconnu</div>\r\n          <div className=\"gav-employee-dept\">...</div>\r\n        </>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <div className=\"gav-employee-name\">\r\n          {personnel.prenom} {personnel.nom}\r\n        </div>\r\n        <div className=\"gav-employee-dept\">{personnel.role || \"N/A\"}</div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Injection du CSS encapsul√© */}\r\n      <style>{encapsulatedStyles}</style>\r\n      \r\n      <div className=\"gav-container\">\r\n        {/* En-t√™te et recherche */}\r\n        <div className=\"gav-header-section\">\r\n          <h1 className=\"gav-title\">\r\n            Gestion des Demandes d'Avances\r\n          </h1>\r\n          \r\n          {/* Barre de recherche */}\r\n          <div className=\"gav-search-container\">\r\n            <div className=\"gav-search-icon\">\r\n              <Search size={18} />\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"gav-search-input\"\r\n              placeholder=\"Rechercher par nom ou montant...\"\r\n              value={recherche}\r\n              onChange={(e) => filtrerDemandes(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Affichage des erreurs */}\r\n        {error && (\r\n          <div className=\"gav-error\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {/* Tableau des demandes */}\r\n        <div className=\"gav-table-container\">\r\n          <table className=\"gav-table\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"gav-th\">Employ√©</th>\r\n                <th className=\"gav-th\">Montant</th>\r\n                <th className=\"gav-th\">Type</th>\r\n                <th className=\"gav-th\">Statut</th>\r\n                <th className=\"gav-th\">Motif</th>\r\n                <th className=\"gav-th\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {demandesFiltrees.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"6\" className=\"gav-td\" style={{ textAlign: 'center' }}>\r\n                    Aucune demande d'avance trouv√©e\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                demandesFiltrees.map((demande) => (\r\n                  <tr key={demande._id} className=\"gav-tr\">\r\n                    <td className=\"gav-td\">\r\n                      {renderEmploye(demande.personnel)}\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-amount\">\r\n                        {demande.montant} ‚Ç¨\r\n                      </div>\r\n                      <div className=\"gav-date\">{formatDate(demande.createdAt)}</div>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <span className={`gav-badge ${demande.typeDemande === \"Urgente\" ? \"gav-badge-urgent\" : \"gav-badge-standard\"}`}>\r\n                        {demande.typeDemande}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      {renderStatus(demande.statut)}\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <button\r\n                        className=\"gav-view-button\"\r\n                        onClick={() => ouvrirModal(demande)}\r\n                      >\r\n                        <Eye size={14} />\r\n                        <span>Voir motif</span>\r\n                      </button>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-actions\">\r\n                        {mapStatus(demande.statut) === \"En attente\" && (\r\n                          <>\r\n                            <button \r\n                              className=\"gav-action-button gav-action-button-approve\" \r\n                              onClick={() => handleApprove(demande._id)}\r\n                              title=\"Approuver\"\r\n                            >\r\n                              <Check size={16} />\r\n                            </button>\r\n                            <button \r\n                              className=\"gav-action-button gav-action-button-reject\" \r\n                              onClick={() => handleReject(demande._id)}\r\n                              title=\"Refuser\"\r\n                            >\r\n                              <X size={16} />\r\n                            </button>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        \r\n        {/* Information sur les r√©sultats */}\r\n        <div className=\"gav-footer\">\r\n          Affichage de {demandesFiltrees.length} sur {demandes.length} demandes d'avance\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal pour afficher le d√©tail de la demande */}\r\n      {modalVisible && demandeSelected && (\r\n        <div className=\"gav-modal-overlay\" onClick={fermerModal}>\r\n          <div className=\"gav-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"gav-modal-header\">\r\n              <h3 className=\"gav-modal-title\">D√©tails de la demande</h3>\r\n              <button className=\"gav-modal-close\" onClick={fermerModal}>\r\n                <X size={20} />\r\n              </button>\r\n            </div>\r\n            <div className=\"gav-modal-body\">\r\n              <div className=\"gav-modal-info-grid\">\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Employ√©</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {personnelDetails[demandeSelected.personnel] ? \r\n                      `${personnelDetails[demandeSelected.personnel].prenom} ${personnelDetails[demandeSelected.personnel].nom}` :\r\n                      \"Employ√© inconnu\"}\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">D√©partement</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {personnelDetails[demandeSelected.personnel]?.role || \"N/A\"}\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Montant</span>\r\n                  <span className=\"gav-modal-info-value\">{demandeSelected.montant} ‚Ç¨</span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Date de demande</span>\r\n                  <span className=\"gav-modal-info-value\">{formatDate(demandeSelected.createdAt)}</span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Type</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    <span className={`gav-badge ${demandeSelected.typeDemande === \"Urgente\" ? \"gav-badge-urgent\" : \"gav-badge-standard\"}`}>\r\n                      {demandeSelected.typeDemande}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Statut</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {renderStatus(demandeSelected.statut)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"gav-modal-section\">\r\n                <h4 className=\"gav-modal-section-title\">Motif de la demande</h4>\r\n                <div className=\"gav-modal-section-content\">\r\n                  {demandeSelected.motif}\r\n                </div>\r\n              </div>\r\n\r\n              {demandeSelected.reponse && (\r\n                <div className=\"gav-modal-section\">\r\n                  <h4 className=\"gav-modal-section-title\">R√©ponse √† la demande</h4>\r\n                  <div className=\"gav-modal-section-content\">\r\n                    {demandeSelected.reponse}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"gav-modal-footer\">\r\n              <button className=\"gav-modal-button gav-modal-button-secondary\" onClick={fermerModal}>\r\n                Fermer\r\n              </button>\r\n              {demandeSelected.statut === \"pending\" && (\r\n                <>\r\n                  <button \r\n                    className=\"gav-modal-button\" \r\n                    onClick={() => {\r\n                      handleReject(demandeSelected._id);\r\n                      fermerModal();\r\n                    }}\r\n                    style={{ \r\n                      backgroundColor: \"#fee2e2\", \r\n                      color: \"#b91c1c\",\r\n                      borderColor: \"#fecaca\" \r\n                    }}\r\n                  >\r\n                    Refuser\r\n                  </button>\r\n                  <button \r\n                    className=\"gav-modal-button\" \r\n                    onClick={() => {\r\n                      handleApprove(demandeSelected._id);\r\n                      fermerModal();\r\n                    }}\r\n                    style={{ \r\n                      backgroundColor: \"#dcfce7\", \r\n                      color: \"#166534\",\r\n                      borderColor: \"#86efac\" \r\n                    }}\r\n                  >\r\n                    Approuver\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Navbars\\IndexNavbar.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Headers\\HeaderStats.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Footers\\FooterAdmin.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\auth\\Signup.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\Recrutement.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Personnels.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Departement.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Cong√©.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Condidature.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\Formation.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeC.js",["214","215"],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeF.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\admin\\DemandeA.js",["216","217"],"import { useState, useEffect } from \"react\";\r\nimport { Search, AlertCircle, CheckCircle2, XCircle, Eye, Filter, ChevronDown, Clock, Check, X } from \"lucide-react\";\r\n\r\n// CSS encapsul√© avec pr√©fixe \"gav-\" (Gestion Avances)\r\nconst encapsulatedStyles = `\r\n  .gav-container {\r\n    background: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n    position: relative;\r\n    width: 100%;\r\n  }\r\n  \r\n  .gav-header-section {\r\n    padding: 1.5rem;\r\n    border-bottom: 1px solid #e2e8f0;\r\n  }\r\n  \r\n  .gav-title {\r\n    font-size: 1.5rem;\r\n    font-weight: 700;\r\n    margin-bottom: 1.5rem;\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gav-search-filter-container {\r\n    display: flex;\r\n    gap: 1rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .gav-search-container {\r\n    position: relative;\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .gav-search-icon {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: #9ca3af;\r\n  }\r\n  \r\n  .gav-search-input {\r\n    width: 100%;\r\n    padding: 0.5rem 0.75rem 0.5rem 2.5rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n    font-size: 0.875rem;\r\n  }\r\n  \r\n  .gav-search-input:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gav-filter-container {\r\n    position: relative;\r\n    min-width: 180px;\r\n  }\r\n  \r\n  .gav-filter-select {\r\n    appearance: none;\r\n    width: 100%;\r\n    padding: 0.5rem 2.5rem 0.5rem 1rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    background-color: white;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .gav-filter-icon {\r\n    position: absolute;\r\n    right: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: #9ca3af;\r\n    pointer-events: none;\r\n  }\r\n  \r\n  .gav-table-container {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .gav-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  .gav-th {\r\n    text-align: left;\r\n    padding: 0.75rem 1rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    color: #6b7280;\r\n    background-color:#f5f5f5;\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gav-td {\r\n    padding: 1rem;\r\n    vertical-align: middle;\r\n    color: #374151;\r\n    border-bottom: 1px solid #f3f4f6;\r\n  }\r\n  \r\n  .gav-tr {\r\n    transition: background-color 0.2s ease;\r\n  }\r\n  \r\n  .gav-tr:hover {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .gav-employee-name {\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-employee-dept {\r\n    font-size: 0.75rem;\r\n    color: #6b7280;\r\n    margin-top: 0.25rem;\r\n  }\r\n  \r\n  .gav-amount {\r\n    font-size: 0.875rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-date {\r\n    font-size: 0.75rem;\r\n    color: #6b7280;\r\n    margin-top: 0.25rem;\r\n  }\r\n  \r\n  .gav-badge {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .gav-badge-standard {\r\n    background-color: #dbeafe;\r\n    color: #1e40af;\r\n  }\r\n  \r\n  .gav-badge-urgent {\r\n    background-color: #ede9fe;\r\n    color: #5b21b6;\r\n  }\r\n  \r\n  .gav-status-badge {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    padding: 0.375rem 0.75rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    width: fit-content;\r\n  }\r\n  \r\n  .gav-status-approved {\r\n    background-color: #ecfdf5;\r\n    color: #059669;\r\n  }\r\n  \r\n  .gav-status-pending {\r\n    background-color: #fffbeb;\r\n    color: #d97706;\r\n  }\r\n  \r\n  .gav-status-rejected {\r\n    background-color: #fef2f2;\r\n    color: #dc2626;\r\n  }\r\n  \r\n  .gav-view-button {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: 0.25rem;\r\n    padding: 0.375rem 0.75rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    color: #4b5563;\r\n    background-color: white;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-view-button:hover {\r\n    background-color: #f9fafb;\r\n    border-color: #9ca3af;\r\n  }\r\n  \r\n.gav-action-button {\r\n  padding: 0.375rem;\r\n  border-radius: 0.375rem;\r\n  transition: all 0.2s ease;\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.gav-action-button-approve {\r\n  background-color: #d1fae5;\r\n  color: #059669;\r\n}\r\n\r\n.gav-action-button-approve:hover {\r\n  background-color: #a7f3d0;\r\n}\r\n\r\n.gav-action-button-reject {\r\n  background-color: #fee2e2;\r\n  color: #dc2626;\r\n}\r\n\r\n.gav-action-button-reject:hover {\r\n  background-color: #fecaca;\r\n}\r\n  \r\n  .gav-modal-overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gav-modal {\r\n    background-color: white;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n    width: 90%;\r\n    max-width: 32rem;\r\n    max-height: 90vh;\r\n    overflow-y: auto;\r\n    z-index: 60;\r\n  }\r\n  \r\n  .gav-modal-header {\r\n    padding: 1rem 1.5rem;\r\n    border-bottom: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .gav-modal-title {\r\n    font-size: 1.25rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-close {\r\n    background: none;\r\n    border: none;\r\n    color: #6b7280;\r\n    cursor: pointer;\r\n    width: 2rem;\r\n    height: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-modal-close:hover {\r\n    background-color: #f3f4f6;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-body {\r\n    padding: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-section {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-section:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n  \r\n  .gav-modal-section-title {\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    color: #111827;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .gav-modal-section-content {\r\n    font-size: 0.875rem;\r\n    line-height: 1.5;\r\n    color: #4b5563;\r\n    background-color: #f9fafb;\r\n    padding: 1rem;\r\n    border-radius: 0.375rem;\r\n    border: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gav-modal-info-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gav-modal-info-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.25rem;\r\n  }\r\n  \r\n  .gav-modal-info-label {\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n    color: #6b7280;\r\n  }\r\n  \r\n  .gav-modal-info-value {\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #111827;\r\n  }\r\n  \r\n  .gav-modal-footer {\r\n    padding: 1rem 1.5rem;\r\n    border-top: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  .gav-modal-button {\r\n    padding: 0.5rem 1rem;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    border-radius: 0.375rem;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gav-modal-button-secondary {\r\n    background-color: white;\r\n    color: #4b5563;\r\n    border: 1px solid #d1d5db;\r\n  }\r\n  \r\n  .gav-modal-button-secondary:hover {\r\n    background-color: #f9fafb;\r\n    border-color: #9ca3af;\r\n  }\r\n  \r\n  .gav-modal-button-primary {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border: 1px solid transparent;\r\n  }\r\n  \r\n  .gav-modal-button-primary:hover {\r\n    background-color: #0d9488;\r\n  }\r\n\r\n  .gav-loading {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 2rem;\r\n    font-size: 1rem;\r\n    color: #6b7280;\r\n  }\r\n\r\n  .gav-error {\r\n    padding: 1rem;\r\n    background-color: #fee2e2;\r\n    color: #b91c1c;\r\n    border-radius: 0.375rem;\r\n    margin: 1rem;\r\n    text-align: center;\r\n  }\r\n\r\n  .gav-footer {\r\n    padding: 1rem 1.5rem;\r\n    background-color: #f8fafc;\r\n    border-top: 1px solid #e2e8f0;\r\n    font-size: 0.875rem;\r\n    color: #64748b;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n\r\n  .gav-count {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    font-weight: 500;\r\n    color: #334155;\r\n  }\r\n\r\n  .gav-count-icon {\r\n    color: #14b8a6;\r\n  }\r\n\r\n  /* Toast styles */\r\n  .gav-toast-container {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    z-index: 1000;\r\n  }\r\n\r\n  .gav-toast {\r\n    padding: 12px 24px;\r\n    border-radius: 8px;\r\n    color: white;\r\n    font-weight: 500;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    animation: slideIn 0.3s ease-out;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .gav-toast-success {\r\n    background-color: #10b981;\r\n  }\r\n\r\n  .gav-toast-error {\r\n    background-color: #ef4444;\r\n  }\r\n\r\n  @keyframes slideIn {\r\n    from {\r\n      transform: translateX(100%);\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      transform: translateX(0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  /* Pagination styles */\r\n  .gav-pagination {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 1rem 1.5rem;\r\n    background-color: #f8fafc;\r\n    border-top: 1px solid #e2e8f0;\r\n  }\r\n\r\n  .gav-pagination-controls {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n  }\r\n\r\n  .gav-page-button {\r\n    padding: 0.5rem 1rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    background-color: white;\r\n    color: #4b5563;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n    font-size: 0.875rem;\r\n  }\r\n\r\n  .gav-page-button:hover {\r\n    background-color: #f3f4f6;\r\n  }\r\n\r\n  .gav-page-button:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  .gav-page-button.active {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border-color: #14b8a6;\r\n  }\r\n`;\r\n\r\nexport default function GestionAvances() {\r\n  const [demandes, setDemandes] = useState([]);\r\n  const [demandesFiltrees, setDemandesFiltrees] = useState([]);\r\n  const [recherche, setRecherche] = useState(\"\");\r\n  const [filtreStatut, setFiltreStatut] = useState(\"Tous\");\r\n  const [demandeSelected, setDemandeSelected] = useState(null);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [toasts, setToasts] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n\r\n  // Charger les demandes depuis l'API\r\n  useEffect(() => {\r\n    const fetchDemandes = async () => {\r\n      try {\r\n        const response = await fetch('/api/alldemandeavance');\r\n        if (!response.ok) {\r\n          throw new Error('Erreur lors de la r√©cup√©ration des demandes');\r\n        }\r\n        const data = await response.json();\r\n        setDemandes(data);\r\n        setDemandesFiltrees(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDemandes();\r\n  }, []);\r\n\r\n  // Filtrer les demandes bas√© sur la recherche et le statut\r\n  useEffect(() => {\r\n    let resultats = demandes;\r\n    \r\n    if (recherche.trim()) {\r\n      const termeLower = recherche.toLowerCase();\r\n      resultats = resultats.filter(demande => \r\n        (demande.nom && demande.nom.toLowerCase().includes(termeLower)) ||\r\n        (demande.prenom && demande.prenom.toLowerCase().includes(termeLower)) ||\r\n        (demande.montant && demande.montant.toString().includes(recherche))\r\n      );\r\n    }\r\n    \r\n    if (filtreStatut !== \"Tous\") {\r\n      resultats = resultats.filter(demande => demande.statut === filtreStatut);\r\n    }\r\n    \r\n    setDemandesFiltrees(resultats);\r\n    setCurrentPage(1); // Reset √† la premi√®re page quand les filtres changent\r\n  }, [recherche, filtreStatut, demandes]);\r\n\r\n  // Pagination logic\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = demandesFiltrees.slice(indexOfFirstItem, indexOfLastItem);\r\n  const totalPages = Math.ceil(demandesFiltrees.length / itemsPerPage);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Formater la date pour l'affichage\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('fr-FR');\r\n  };\r\n\r\n  // Gestion des toasts\r\n  const showToast = (message, type = 'success') => {\r\n    const id = Date.now();\r\n    const newToast = { id, message, type };\r\n    \r\n    setToasts(prev => [...prev, newToast]);\r\n    \r\n    setTimeout(() => {\r\n      removeToast(id);\r\n    }, 3000);\r\n  };\r\n\r\n  const removeToast = (id) => {\r\n    setToasts(prev => prev.filter(toast => toast.id !== id));\r\n  };\r\n\r\n  // Ouvrir le modal avec les d√©tails de la demande\r\n  const ouvrirModal = (demande) => {\r\n    setDemandeSelected(demande);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  // Fermer le modal\r\n  const fermerModal = () => {\r\n    setModalVisible(false);\r\n    setDemandeSelected(null);\r\n  };\r\n\r\n  // Mettre √† jour le statut d'une demande\r\n  const handleStatusUpdate = async (id, newStatus) => {\r\n    try {\r\n      // Mettre √† jour le statut de la demande via l'API\r\n      const response = await fetch(`/api/updatedemandeAvance/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ statut: newStatus })\r\n      });\r\n      \r\n      if (!response.ok) throw new Error('√âchec de la mise √† jour de la demande');\r\n      \r\n      // Mettre √† jour l'√©tat local\r\n      const demandesUpdated = demandes.map(demande => {\r\n        if (demande._id === id) {\r\n          return { ...demande, statut: newStatus };\r\n        }\r\n        return demande;\r\n      });\r\n      \r\n      setDemandes(demandesUpdated);\r\n      showToast(`Demande ${newStatus === 'Approuv√©e' ? 'approuv√©e' : 'refus√©e'}`, 'success');\r\n    } catch (err) {\r\n      showToast(err.message, 'error');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleApprove = (id) => {\r\n    handleStatusUpdate(id, 'Approuv√©e');\r\n  };\r\n\r\n  const handleReject = (id) => {\r\n    handleStatusUpdate(id, 'Rejet√©e');\r\n  };\r\n\r\n  // Rendu du statut avec l'ic√¥ne appropri√©e\r\n  const renderStatus = (status) => {\r\n    switch (status) {\r\n      case \"Approuv√©e\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-approved\">\r\n            <CheckCircle2 size={16} />\r\n            <span>Approuv√©</span>\r\n          </div>\r\n        );\r\n      case \"En attente\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-pending\">\r\n            <Clock size={16} />\r\n            <span>En attente</span>\r\n          </div>\r\n        );\r\n      case \"Rejet√©e\":\r\n        return (\r\n          <div className=\"gav-status-badge gav-status-rejected\">\r\n            <XCircle size={16} />\r\n            <span>Refus√©</span>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <style>{encapsulatedStyles}</style>\r\n        <div className=\"gav-loading\">Chargement des demandes d'avance...</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Injection du CSS encapsul√© */}\r\n      <style>{encapsulatedStyles}</style>\r\n      \r\n      <div className=\"gav-container\">\r\n        {/* En-t√™te et recherche */}\r\n        <div className=\"gav-header-section\">\r\n          <h1 className=\"gav-title\">\r\n            Gestion des Demandes d'Avances\r\n          </h1>\r\n          \r\n          <div className=\"gav-search-filter-container\">\r\n            {/* Barre de recherche */}\r\n            <div className=\"gav-search-container\">\r\n              <div className=\"gav-search-icon\">\r\n                <Search size={18} />\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"gav-search-input\"\r\n                placeholder=\"Rechercher par nom, pr√©nom ou montant...\"\r\n                value={recherche}\r\n                onChange={(e) => setRecherche(e.target.value)}\r\n              />\r\n            </div>\r\n            \r\n            {/* Filtre par statut */}\r\n            <div className=\"gav-filter-container\">\r\n              <select\r\n                className=\"gav-filter-select\"\r\n                value={filtreStatut}\r\n                onChange={(e) => setFiltreStatut(e.target.value)}\r\n              >\r\n                <option value=\"Tous\">Tous les statuts</option>\r\n                <option value=\"En attente\">En attente</option>\r\n                <option value=\"Approuv√©e\">Approuv√©e</option>\r\n                <option value=\"Rejet√©e\">Rejet√©e</option>\r\n              </select>\r\n              <div className=\"gav-filter-icon\">\r\n                <Filter size={18} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Affichage des erreurs */}\r\n        {error && (\r\n          <div className=\"gav-error\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {/* Tableau des demandes */}\r\n        <div className=\"gav-table-container\">\r\n          <table className=\"gav-table\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"gav-th\">Nom</th>\r\n                <th className=\"gav-th\">Pr√©nom</th>\r\n                <th className=\"gav-th\">Montant</th>\r\n                <th className=\"gav-th\">Type</th>\r\n                <th className=\"gav-th\">Statut</th>\r\n                <th className=\"gav-th\">Motif</th>\r\n                <th className=\"gav-th\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {currentItems.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan=\"7\" className=\"gav-td\" style={{ textAlign: 'center' }}>\r\n                    Aucune demande d'avance trouv√©e\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                currentItems.map((demande) => (\r\n                  <tr key={demande._id} className=\"gav-tr\">\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-employee-name\">\r\n                        {demande.nom}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-employee-name\">\r\n                        {demande.prenom}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-amount\">\r\n                        {demande.montant} TND\r\n                      </div>\r\n                      <div className=\"gav-date\">{formatDate(demande.createdAt)}</div>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <span className={`gav-badge ${demande.type === \"Urgente\" ? \"gav-badge-urgent\" : \"gav-badge-standard\"}`}>\r\n                        {demande.type}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      {renderStatus(demande.statut)}\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <button\r\n                        className=\"gav-view-button\"\r\n                        onClick={() => ouvrirModal(demande)}\r\n                      >\r\n                        <Eye size={14} />\r\n                        <span>Voir motif</span>\r\n                      </button>\r\n                    </td>\r\n                    <td className=\"gav-td\">\r\n                      <div className=\"gav-actions\">\r\n                        {demande.statut === \"En attente\" && (\r\n                          <>\r\n                            <button \r\n                              className=\"gav-action-button gav-action-button-approve\" \r\n                              onClick={() => handleApprove(demande._id)}\r\n                              title=\"Approuver\"\r\n                            >\r\n                              <Check size={16} />\r\n                            </button>\r\n                            <button \r\n                              className=\"gav-action-button gav-action-button-reject\" \r\n                              onClick={() => handleReject(demande._id)}\r\n                              title=\"Refuser\"\r\n                            >\r\n                              <X size={16} />\r\n                            </button>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        \r\n        {/* Pagination */}\r\n        <div className=\"gav-pagination\">\r\n          <div className=\"gav-count\">\r\n            <CheckCircle2 className=\"gav-count-icon\" size={16} />\r\n            <span>Affichage de {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, demandesFiltrees.length)} sur {demandesFiltrees.length} demandes</span>\r\n          </div>\r\n          \r\n          <div className=\"gav-pagination-controls\">\r\n            <button \r\n              onClick={() => paginate(currentPage - 1)} \r\n              disabled={currentPage === 1}\r\n              className=\"gav-page-button\"\r\n            >\r\n              Pr√©c√©dent\r\n            </button>\r\n            \r\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (\r\n              <button\r\n                key={number}\r\n                onClick={() => paginate(number)}\r\n                className={`gav-page-button ${currentPage === number ? 'active' : ''}`}\r\n              >\r\n                {number}\r\n              </button>\r\n            ))}\r\n            \r\n            <button \r\n              onClick={() => paginate(currentPage + 1)} \r\n              disabled={currentPage === totalPages || totalPages === 0}\r\n              className=\"gav-page-button\"\r\n            >\r\n              Suivant\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal pour afficher le d√©tail de la demande */}\r\n      {modalVisible && demandeSelected && (\r\n        <div className=\"gav-modal-overlay\" onClick={fermerModal}>\r\n          <div className=\"gav-modal\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"gav-modal-header\">\r\n              <h3 className=\"gav-modal-title\">D√©tails de la demande</h3>\r\n              <button className=\"gav-modal-close\" onClick={fermerModal}>\r\n                <X size={20} />\r\n              </button>\r\n            </div>\r\n            <div className=\"gav-modal-body\">\r\n              <div className=\"gav-modal-info-grid\">\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Nom</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {demandeSelected.nom}\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Pr√©nom</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {demandeSelected.prenom}\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Email</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {demandeSelected.email || \"N/A\"}\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Montant</span>\r\n                  <span className=\"gav-modal-info-value\">{demandeSelected.montant} TND</span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Date de demande</span>\r\n                  <span className=\"gav-modal-info-value\">{formatDate(demandeSelected.createdAt)}</span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Type</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    <span className={`gav-badge ${demandeSelected.type === \"Urgente\" ? \"gav-badge-urgent\" : \"gav-badge-standard\"}`}>\r\n                      {demandeSelected.type}\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n                <div className=\"gav-modal-info-item\">\r\n                  <span className=\"gav-modal-info-label\">Statut</span>\r\n                  <span className=\"gav-modal-info-value\">\r\n                    {renderStatus(demandeSelected.statut)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"gav-modal-section\">\r\n                <h4 className=\"gav-modal-section-title\">Motif de la demande</h4>\r\n                <div className=\"gav-modal-section-content\">\r\n                  {demandeSelected.motif}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"gav-modal-footer\">\r\n              <button className=\"gav-modal-button gav-modal-button-secondary\" onClick={fermerModal}>\r\n                Fermer\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Toast notifications */}\r\n      <div className=\"gav-toast-container\">\r\n        {toasts.map(toast => (\r\n          <div \r\n            key={toast.id} \r\n            className={`gav-toast gav-toast-${toast.type}`}\r\n            onClick={() => removeToast(toast.id)}\r\n          >\r\n            {toast.type === 'success' ? <Check size={18} /> : <X size={18} />}\r\n            {toast.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\DemandeFormation.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\SettingsEmploye.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Sidebar\\SlidebarEmploye.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\views\\employe\\DemandeAvance.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeConge.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardSettings.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardStats.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Maps\\MapExample.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\UserDropdown.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\NotificationDropdown.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Dropdowns\\IndexDropdown.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardRecrutement.js",["218"],"import React, { useState, useEffect } from 'react';\r\nimport { \r\n  Edit, \r\n  Trash, \r\n  Plus, \r\n  X, \r\n  Search, \r\n  Filter,\r\n  Check\r\n} from 'lucide-react';\r\nimport axios from 'axios'; \r\n\r\n\r\nconst encapsulatedStyles = `\r\n  .cr-container {\r\n    background: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n    font-family: 'Arial, sans-serif';\r\n  }\r\n  \r\n  .cr-header-section {\r\n    padding: 1.5rem;\r\n    border-bottom: 1px solid #e2e8f0;\r\n  }\r\n  \r\n  .cr-search-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .cr-search-input {\r\n    flex: 1;\r\n    position: relative;\r\n  }\r\n  \r\n  .cr-search-icon {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: #9ca3af;\r\n  }\r\n  \r\n  .cr-add-button {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-add-button:hover {\r\n    background-color: #0d9488;\r\n  }\r\n  \r\n  .cr-tab-button {\r\n    padding: 0.5rem 1rem;\r\n    border-bottom: 2px solid transparent;\r\n    color: #6b7280;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-tab-button.cr-active {\r\n    border-bottom-color: #14b8a6;\r\n    color: #14b8a6;\r\n  }\r\n  \r\n  .cr-tab-button:hover:not(.cr-active) {\r\n    color: #374151;\r\n  }\r\n  \r\n  .cr-job-listing {\r\n    background: #f9fafb;\r\n    border-left: 5px solid #14b8a6;\r\n    margin: 1rem 0;\r\n    padding: 1rem;\r\n    border-radius: 5px;\r\n    position: relative;\r\n  }\r\n  \r\n  .cr-job-title {\r\n    color: #14b8a6;\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n    font-size: 1.25rem;\r\n  }\r\n  \r\n  .cr-job-detail {\r\n    color: #4b5563;\r\n    margin: 0.5rem 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n  }\r\n\r\n  .cr-job-badge {\r\n    background-color: #e6fffa;\r\n    color: #047857;\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .cr-action-buttons {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n    position: absolute;\r\n    top: 1rem;\r\n    right: 1rem;\r\n  }\r\n  \r\n  .cr-action-button {\r\n    padding: 0.375rem;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-edit-button {\r\n    background-color: #dbeafe;\r\n    color: #3b82f6;\r\n  }\r\n  \r\n  .cr-edit-button:hover {\r\n    background-color: #bfdbfe;\r\n  }\r\n  \r\n  .cr-delete-button {\r\n    background-color: #fee2e2;\r\n    color: #ef4444;\r\n  }\r\n  \r\n  .cr-delete-button:hover {\r\n    background-color: #fecaca;\r\n  }\r\n  \r\n  .cr-modal-overlay {\r\n    position: fixed;\r\n    inset: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1rem;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .cr-modal-container {\r\n    max-height: 90vh;\r\n    overflow-y: auto;\r\n    background-color: white;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    padding: 1.5rem;\r\n    width: 100%;\r\n    max-width: 500px;\r\n  }\r\n  \r\n  .cr-modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .cr-modal-title {\r\n    font-size: 1.25rem;\r\n    font-weight: 700;\r\n    color: #1f2937;\r\n    margin: 0;\r\n  }\r\n  \r\n  .cr-modal-close {\r\n    color: #6b7280;\r\n    transition: color 0.2s ease;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-modal-close:hover {\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .cr-form-group {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .cr-form-label {\r\n    display: block;\r\n    margin-bottom: 0.25rem;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #374151;\r\n  }\r\n  \r\n  .cr-form-input {\r\n    width: 100%;\r\n    padding: 0.5rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .cr-form-input:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .cr-form-select {\r\n    width: 100%;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .cr-modal-footer {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 0.5rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .cr-btn {\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-btn-cancel {\r\n    background-color: #f3f4f6;\r\n    color: #374151;\r\n  }\r\n  \r\n  .cr-btn-cancel:hover {\r\n    background-color: #e5e7eb;\r\n  }\r\n  \r\n  .cr-btn-save {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n  }\r\n  \r\n  .cr-btn-save:hover {\r\n    background-color: #0d9488;\r\n  }\r\n  \r\n  .cr-toast {\r\n    position: fixed;\r\n    bottom: 1rem;\r\n    right: 1rem;\r\n    padding: 1rem;\r\n    border-radius: 0.375rem;\r\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    color: white;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .cr-toast-success {\r\n    background-color: #10b981;\r\n  }\r\n  \r\n  .cr-toast-error {\r\n    background-color: #ef4444;\r\n  }\r\n  \r\n  .cr-pagination {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-top: 1.5rem;\r\n    padding: 0 1rem;\r\n  }\r\n  \r\n  .cr-page-button {\r\n    padding: 0.375rem 0.75rem;\r\n    border: 1px solid #e5e7eb;\r\n    border-radius: 0.375rem;\r\n    font-size: 0.875rem;\r\n    transition: all 0.2s ease;\r\n    background: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .cr-page-button.cr-active {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border-color: #14b8a6;\r\n  }\r\n  \r\n  .cr-page-button:hover:not(.cr-active) {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .cr-page-button:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst Toast = ({ message, type, onClose }) => {\r\n  const toastClass = type === 'success' ? 'cr-toast-success' : 'cr-toast-error';\r\n  \r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onClose();\r\n    }, 3000);\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, [onClose]);\r\n  \r\n  return (\r\n    <div className={`cr-toast ${toastClass}`}>\r\n      {type === 'success' ? <Check size={20} /> : <X size={20} />}\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CardRecrutement = () => {\r\n  const [offers, setOffers] = useState([]);\r\n  const [filteredOffers, setFilteredOffers] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [locationFilter, setLocationFilter] = useState('all');\r\n  const [currentOffer, setCurrentOffer] = useState(null);\r\n  const [offerToDelete, setOfferToDelete] = useState(null);\r\n  const [toast, setToast] = useState({ show: false, message: '', type: '' });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [offersPerPage] = useState(5);\r\n\r\n  useEffect(() => {\r\n    fetchOffers();\r\n  }, []);\r\n\r\n  const fetchOffers = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get(`/api/alloffre`);\r\n      \r\n      const formattedOffers = response.data.map(offer => ({\r\n        id: offer._id,\r\n        title: offer.titre,\r\n        location: offer.lieu,\r\n        date: new Date(offer.date).toISOString().split('T')[0]\r\n      }));\r\n      \r\n      setOffers(formattedOffers);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement des offres:', error);\r\n      setError('Impossible de charger les offres.');\r\n      setIsLoading(false);\r\n      showToast('Erreur lors du chargement des offres', 'error');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let filtered = [...offers];\r\n    \r\n    if (locationFilter !== 'all') {\r\n      filtered = filtered.filter(offer => offer.location === locationFilter);\r\n    }\r\n    \r\n    if (searchTerm.trim() !== '') {\r\n      filtered = filtered.filter(offer => \r\n        offer.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    setFilteredOffers(filtered);\r\n    setCurrentPage(1);\r\n  }, [offers, searchTerm, locationFilter]);\r\n\r\n  const indexOfLastOffer = currentPage * offersPerPage;\r\n  const indexOfFirstOffer = indexOfLastOffer - offersPerPage;\r\n  const currentOffers = filteredOffers.slice(indexOfFirstOffer, indexOfLastOffer);\r\n  const totalPages = Math.ceil(filteredOffers.length / offersPerPage);\r\n\r\n  const showToast = (message, type) => {\r\n    setToast({ show: true, message, type });\r\n  };\r\n\r\n  const closeToast = () => {\r\n    setToast({ ...toast, show: false });\r\n  };\r\n\r\n  const handleAddOffer = () => {\r\n    setCurrentOffer({ title: '', location: '', date: new Date().toISOString().split('T')[0] });\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleEditOffer = (offer) => {\r\n    setCurrentOffer({ ...offer });\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleDeleteOffer = (offer) => {\r\n    setOfferToDelete(offer);\r\n    setIsDeleteModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false);\r\n    setCurrentOffer(null);\r\n  };\r\n\r\n  const handleCloseDeleteModal = () => {\r\n    setIsDeleteModalOpen(false);\r\n    setOfferToDelete(null);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setCurrentOffer({ ...currentOffer, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!currentOffer.title || !currentOffer.location || !currentOffer.date) {\r\n      showToast(\"Veuillez remplir tous les champs\", \"error\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const offerData = {\r\n        titre: currentOffer.title,\r\n        lieu: currentOffer.location,\r\n        date: currentOffer.date\r\n      };\r\n      \r\n      if (currentOffer.id) {\r\n        await axios.put(`/api/updateoffre/${currentOffer.id}`, offerData);\r\n        showToast(\"Offre modifi√©e avec succ√®s\", \"success\");\r\n      } else {\r\n        await axios.post(`/api/addoffre`, offerData);\r\n        showToast(\"Offre ajout√©e avec succ√®s\", \"success\");\r\n      }\r\n      \r\n      fetchOffers();\r\n      setIsModalOpen(false);\r\n      setCurrentOffer(null);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la sauvegarde de l\\'offre:', error);\r\n      showToast(error.response?.data?.error || \"Une erreur est survenue\", \"error\");\r\n    }\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (offerToDelete) {\r\n      try {\r\n        await axios.delete(`/api/deleteoffre/${offerToDelete.id}`);\r\n        showToast(\"Offre supprim√©e avec succ√®s\", \"success\");\r\n        fetchOffers();\r\n        setIsDeleteModalOpen(false);\r\n        setOfferToDelete(null);\r\n      } catch (error) {\r\n        console.error('Erreur lors de la suppression de l\\'offre:', error);\r\n        showToast(error.response?.data?.error || \"Une erreur est survenue lors de la suppression\", \"error\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const uniqueLocations = ['all', ...new Set(offers.map(offer => offer.location))];\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString('fr-FR', options);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={\"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded\"}>\r\n        <style>{encapsulatedStyles}</style>\r\n        \r\n        <div className=\"cr-container\">\r\n          <div className=\"cr-header-section\">\r\n            <h1 className=\"cr-modal-title\" style={{ fontSize: '1.5rem', marginBottom: '1.5rem' }}>\r\n              Offres d'Emploi\r\n            </h1>\r\n            \r\n            <div className=\"cr-search-container\">\r\n              <div className=\"cr-search-input\">\r\n                <div className=\"cr-search-icon\">\r\n                  <Search size={20} />\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher une offre...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"cr-form-input\"\r\n                  style={{ paddingLeft: '2.5rem' }}\r\n                />\r\n              </div>\r\n              \r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n                <Filter size={20} style={{ color: '#9ca3af' }} />\r\n                <select \r\n                  value={locationFilter} \r\n                  onChange={(e) => setLocationFilter(e.target.value)}\r\n                  className=\"cr-form-select\"\r\n                >\r\n                  <option value=\"all\">Tous les lieux</option>\r\n                  {uniqueLocations.filter(loc => loc !== 'all').map((location, idx) => (\r\n                    <option key={idx} value={location}>{location}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              \r\n              <button className=\"cr-add-button\" onClick={handleAddOffer}>\r\n                <Plus size={20} />\r\n                Ajouter une offre\r\n              </button>\r\n            </div>\r\n            \r\n            {isLoading ? (\r\n              <div style={{ textAlign: 'center', padding: '2rem 0', color: '#6b7280' }}>\r\n                Chargement des offres...\r\n              </div>\r\n            ) : error ? (\r\n              <div style={{ textAlign: 'center', padding: '2rem 0', color: '#ef4444' }}>\r\n                {error}\r\n              </div>\r\n            ) : (\r\n              currentOffers.length > 0 ? (\r\n                currentOffers.map((offer) => (\r\n                  <div key={offer.id} className=\"cr-job-listing\">\r\n                    <h2 className=\"cr-job-title\">{offer.title}</h2>\r\n                    <div className=\"cr-job-detail\">\r\n                      <strong>Lieu:</strong>\r\n                      <span className=\"cr-job-badge\">{offer.location}</span>\r\n                    </div>\r\n                    <div className=\"cr-job-detail\">\r\n                      <strong>Date:</strong> {formatDate(offer.date)}\r\n                    </div>\r\n                    \r\n                    <div className=\"cr-action-buttons\">\r\n                      <button \r\n                        className=\"cr-action-button cr-edit-button\" \r\n                        onClick={() => handleEditOffer(offer)}\r\n                        title=\"Modifier l'offre\"\r\n                      >\r\n                        <Edit size={16} />\r\n                      </button>\r\n                      <button \r\n                        className=\"cr-action-button cr-delete-button\" \r\n                        onClick={() => handleDeleteOffer(offer)}\r\n                        title=\"Supprimer l'offre\"\r\n                      >\r\n                        <Trash size={16} />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div style={{ textAlign: 'center', padding: '2rem 0', color: '#6b7280' }}>\r\n                  Aucune offre trouv√©e\r\n                </div>\r\n              )\r\n            )}\r\n            \r\n            {!isLoading && !error && filteredOffers.length > 0 && (\r\n              <div className=\"cr-pagination\">\r\n                <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>\r\n                  Affichage de {indexOfFirstOffer + 1}-{Math.min(indexOfLastOffer, filteredOffers.length)} sur {offers.length} offres\r\n                </div>\r\n                <div style={{ display: 'flex', gap: '0.5rem' }}>\r\n                  <button \r\n                    className=\"cr-page-button\" \r\n                    onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                    disabled={currentPage === 1}\r\n                  >\r\n                    Pr√©c√©dent\r\n                  </button>\r\n                  \r\n                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\r\n                    <button \r\n                      key={page}\r\n                      className={`cr-page-button ${currentPage === page ? 'cr-active' : ''}`}\r\n                      onClick={() => setCurrentPage(page)}\r\n                    >\r\n                      {page}\r\n                    </button>\r\n                  ))}\r\n                  \r\n                  <button \r\n                    className=\"cr-page-button\" \r\n                    onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                    disabled={currentPage === totalPages}\r\n                  >\r\n                    Suivant\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        {isModalOpen && (\r\n          <div className=\"cr-modal-overlay\">\r\n            <div className=\"cr-modal-container\">\r\n              <div className=\"cr-modal-header\">\r\n                <h2 className=\"cr-modal-title\">\r\n                  {currentOffer.id ? \"Modifier une offre\" : \"Ajouter une offre\"}\r\n                </h2>\r\n                <button className=\"cr-modal-close\" onClick={handleCloseModal}>\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"cr-form-group\">\r\n                  <label className=\"cr-form-label\">Titre de l'offre</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    placeholder=\"Ex: D√©veloppeur Frontend React\"\r\n                    className=\"cr-form-input\"\r\n                    value={currentOffer?.title || ''}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"cr-form-group\">\r\n                  <label className=\"cr-form-label\">Lieu</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"location\"\r\n                    placeholder=\"Ex: Tunis, Remote, etc.\"\r\n                    className=\"cr-form-input\"\r\n                    value={currentOffer?.location || ''}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"cr-form-group\">\r\n                  <label className=\"cr-form-label\">Date</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    className=\"cr-form-input\"\r\n                    value={currentOffer?.date || ''}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n                \r\n                <div className=\"cr-modal-footer\">\r\n                  <button \r\n                    type=\"button\" \r\n                    className=\"cr-btn cr-btn-cancel\" \r\n                    onClick={handleCloseModal}\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button \r\n                    type=\"submit\" \r\n                    className=\"cr-btn cr-btn-save\"\r\n                  >\r\n                    Sauvegarder\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {isDeleteModalOpen && offerToDelete && (\r\n          <div className=\"cr-modal-overlay\">\r\n            <div className=\"cr-modal-container\">\r\n              <div className=\"cr-modal-header\">\r\n                <h2 className=\"cr-modal-title\">Confirmation de suppression</h2>\r\n                <button className=\"cr-modal-close\" onClick={handleCloseDeleteModal}>\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n              \r\n              <div>\r\n                <p style={{ marginBottom: '1.5rem', color: '#4b5563' }}>\r\n                  √ätes-vous s√ªr de vouloir supprimer l'offre <strong>{offerToDelete.title}</strong> ?\r\n                </p>\r\n                \r\n                <div className=\"cr-modal-footer\">\r\n                  <button \r\n                    className=\"cr-btn cr-btn-cancel\" \r\n                    onClick={handleCloseDeleteModal}\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button \r\n                    className=\"cr-btn cr-btn-save\" \r\n                    onClick={confirmDelete}\r\n                    style={{ backgroundColor: '#ef4444' }}\r\n                  >\r\n                    Supprimer\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {toast.show && (\r\n          <Toast \r\n            message={toast.message} \r\n            type={toast.type} \r\n            onClose={closeToast} \r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardRecrutement;","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardPersonnels.js",["219","220","221"],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  Search,\r\n  Edit,\r\n  Trash,\r\n  Plus,\r\n  X,\r\n  Check,\r\n  Filter,\r\n  Eye,\r\n  Copy,\r\n} from \"lucide-react\";\r\nimport \"../../assets/styles/PersonnelStyle.css\";\r\nimport axios from \"axios\";\r\n\r\n// g√©n√©rer un mot de passe al√©atoire\r\nconst generatePassword = () => {\r\n  const length = 10;\r\n  const charset =\r\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\";\r\n  let password = \"\";\r\n  for (let i = 0; i < length; i++) {\r\n    password += charset.charAt(Math.floor(Math.random() * charset.length));\r\n  }\r\n  return password;\r\n};\r\n\r\n// Fonctions de validation\r\nconst isPhoneValid = (phone) => /^[2579]\\d{7}$/.test(phone);\r\nconst isEmailValid = (email) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\nconst isAlpha = (str) => /^[a-zA-Z√Ä-√ø\\s'-]+$/.test(str);\r\n\r\n// Composant Modal pour les d√©tails\r\nconst DetailsModal = ({ employe, onClose }) => {\r\n  if (!employe) return null;\r\n\r\n  return (\r\n    <div className=\"gp-modal-overlay\">\r\n      <div className=\"gp-modal-container\">\r\n        <div className=\"gp-modal-header\">\r\n          <h2 className=\"gp-modal-title\">D√©tails du personnel:</h2>\r\n          <button onClick={onClose} className=\"gp-modal-close\">\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"gp-details-container\">\r\n          <h3 className=\"gp-details-name\">\r\n            {employe.nom} {employe.prenom}\r\n          </h3>\r\n          <p className=\"gp-details-department\">{employe.departement}</p>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">ID:</span>\r\n            <span className=\"gp-details-value\">{employe._id}</span>\r\n          </div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Nom complet:</span>\r\n            <span className=\"gp-details-value\">\r\n              {employe.nom} {employe.prenom}\r\n            </span>\r\n          </div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Sexe:</span>\r\n            <span className=\"gp-details-value\">{employe.sexe}</span>\r\n          </div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Email:</span>\r\n            <span className=\"gp-details-value\">{employe.email}</span>\r\n          </div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">T√©l√©phone:</span>\r\n            <span className=\"gp-details-value\">{employe.tel}</span>\r\n          </div>\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">D√©partement:</span>\r\n            <span className=\"gp-details-value\">{employe.departement}</span>\r\n          </div>\r\n\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Salaire:</span>\r\n            <span className=\"gp-salary-badge\">\r\n              {employe.salaire ? `${employe.salaire} TND` : \"Non d√©fini\"}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Solde de cong√©:</span>\r\n            <span className=\"gp-conge-badge\">\r\n              {employe.soldeConge || employe.soldedeconge || 30} jours restants\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"gp-details-row\">\r\n            <span className=\"gp-details-label\">Statut:</span>\r\n            <span className=\"gp-status-badge\">Actif</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"gp-modal-footer\">\r\n          <button onClick={onClose} className=\"gp-btn gp-btn-cancel\">\r\n            Fermer\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant de toast pour les notifications\r\nconst Toast = ({ message, type, onClose }) => {\r\n  const toastClass =\r\n    type === \"success\"\r\n      ? \"gp-toast-success\"\r\n      : type === \"error\"\r\n      ? \"gp-toast-error\"\r\n      : \"gp-toast-info\";\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onClose();\r\n    }, 3000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <div className={`gp-toast ${toastClass}`}>\r\n      {type === \"success\" && <Check size={20} />}\r\n      {type === \"error\" && <X size={20} />}\r\n      {type === \"info\" && <Search size={20} />}\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Composant principal de gestion du personnel\r\nexport default function GestionPersonnel() {\r\n  // Donn√©es des employ√©s\r\n  const [employes, setEmployes] = useState([]);\r\n  const [employesAffiches, setEmployesAffiches] = useState([]);\r\n  const [recherche, setRecherche] = useState(\"\");\r\n  const [filtreType, setFiltreType] = useState(\"nom\");\r\n  const [filtreDepartement, setFiltreDepartement] = useState(\"tous\");\r\n  const [modalOuvert, setModalOuvert] = useState(false);\r\n  const [detailsModalOuvert, setDetailsModalOuvert] = useState(false);\r\n  const [suppressionModalOuvert, setSuppressionModalOuvert] = useState(false);\r\n  const [employeActuel, setEmployeActuel] = useState(null);\r\n  const [employeDetails, setEmployeDetails] = useState(null);\r\n  const [employeASupprimer, setEmployeASupprimer] = useState(null);\r\n  const [toast, setToast] = useState({ affiche: false, message: \"\", type: \"\" });\r\n  const [departements, setDepartements] = useState([]);\r\n  \r\n  // Pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n\r\n  // Charger les d√©partements\r\n  useEffect(() => {\r\n    const fetchDepartements = async () => {\r\n      try {\r\n        const response = await fetch(\"/api/alldepartment\");\r\n        if (!response.ok) {\r\n          throw new Error(\"Erreur lors de la r√©cup√©ration des d√©partements\");\r\n        }\r\n        const data = await response.json();\r\n        setDepartements(data);\r\n      } catch (error) {\r\n        console.error(\"Erreur:\", error);\r\n        afficherToast(\"Erreur lors du chargement des d√©partements\", \"error\");\r\n      }\r\n    };\r\n\r\n    fetchDepartements();\r\n  }, []);\r\n\r\n  // Nouvel employ√© vide pour le formulaire d'ajout\r\n  const employeVide = {\r\n    id: \"\",\r\n    nom: \"\",\r\n    prenom: \"\",\r\n    email: \"\",\r\n    telephone: \"\",\r\n    departement: \"\",\r\n    sexe: \"\",\r\n    salaire: \"\",\r\n    soldeConge: 30,\r\n    password: generatePassword(),\r\n  };\r\n\r\n  // Filtrer les employ√©s en fonction de la recherche et du d√©partement\r\n  useEffect(() => {\r\n    let filtres = [...employes];\r\n\r\n    // Filtre par d√©partement\r\n    if (filtreDepartement !== \"tous\") {\r\n      filtres = filtres.filter((e) => e.departement === filtreDepartement);\r\n    }\r\n\r\n    // Filtre par recherche\r\n    if (recherche !== \"\") {\r\n      filtres = filtres.filter((employe) => {\r\n        if (filtreType === \"nom\") {\r\n          return (\r\n            employe.nom.toLowerCase().includes(recherche.toLowerCase()) ||\r\n            employe.prenom.toLowerCase().includes(recherche.toLowerCase())\r\n          );\r\n        } else if (filtreType === \"id\") {\r\n          return employe._id.toString().includes(recherche);\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    setEmployesAffiches(filtres);\r\n    setCurrentPage(1); // Reset √† la premi√®re page quand les filtres changent\r\n  }, [recherche, filtreType, filtreDepartement, employes]);\r\n\r\n  // Afficher un toast\r\n  const afficherToast = (message, type) => {\r\n    setToast({ affiche: true, message, type });\r\n  };\r\n\r\n  // Fermer le toast\r\n  const fermerToast = () => {\r\n    setToast({ ...toast, affiche: false });\r\n  };\r\n\r\n  // Ouvrir le modal d'ajout/modification\r\n  const ouvrirModal = (employe = null) => {\r\n    if (employe) {\r\n      setEmployeActuel({\r\n        _id: employe._id,\r\n        nom: employe.nom,\r\n        prenom: employe.prenom,\r\n        email: employe.email,\r\n        telephone: employe.tel,\r\n        departement: employe.departement,\r\n        sexe: employe.sexe.charAt(0).toUpperCase() + employe.sexe.slice(1),\r\n        salaire: employe.salaire,\r\n        soldeConge: employe.soldedeconge || 30,\r\n        password: employe.password || \"\",\r\n      });\r\n    } else {\r\n      setEmployeActuel({\r\n        ...employeVide,\r\n        password: generatePassword(),\r\n      });\r\n    }\r\n    setModalOuvert(true);\r\n  };\r\n\r\n  // Fermer le modal\r\n  const fermerModal = () => {\r\n    setModalOuvert(false);\r\n    setEmployeActuel(null);\r\n  };\r\n\r\n  // Ouvrir le modal de d√©tails\r\n  const ouvrirDetailsModal = (employe) => {\r\n    setEmployeDetails(employe);\r\n    setDetailsModalOuvert(true);\r\n  };\r\n\r\n  // Fermer le modal de d√©tails\r\n  const fermerDetailsModal = () => {\r\n    setDetailsModalOuvert(false);\r\n    setEmployeDetails(null);\r\n  };\r\n\r\n  // Ouvrir le modal de confirmation de suppression\r\n  const ouvrirSuppressionModal = (employe) => {\r\n    setEmployeASupprimer(employe);\r\n    setSuppressionModalOuvert(true);\r\n  };\r\n\r\n  // Fermer le modal de confirmation de suppression\r\n  const fermerSuppressionModal = () => {\r\n    setSuppressionModalOuvert(false);\r\n    setEmployeASupprimer(null);\r\n  };\r\n\r\n  // G√©rer les changements dans le formulaire\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setEmployeActuel((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  // G√©n√©rer un nouveau mot de passe\r\n  const genererNouveauMotDePasse = () => {\r\n    setEmployeActuel((prev) => ({ ...prev, password: generatePassword() }));\r\n  };\r\n\r\n  // Copier le mot de passe dans le presse-papiers\r\n  const copierMotDePasse = () => {\r\n    navigator.clipboard.writeText(employeActuel.password);\r\n    afficherToast(\"Mot de passe copi√© !\", \"success\");\r\n  };\r\n\r\n  // Charger la liste des employ√©s\r\n  useEffect(() => {\r\n    const fetchEmployes = async () => {\r\n      try {\r\n        const response = await axios.get(\"/api/allpersonnel\");\r\n        // Filtrer pour exclure les DRH\r\n        const filteredEmployes = response.data.filter(employe => \r\n          !employe.role || employe.role.toLowerCase() !== \"drh\"\r\n        );\r\n        setEmployes(filteredEmployes);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du chargement des employ√©s:\", error);\r\n        afficherToast(\"Erreur lors du chargement des employ√©s\", \"error\");\r\n      }\r\n    };\r\n\r\n    fetchEmployes();\r\n  }, []);\r\n\r\n  // Logique de pagination\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = employesAffiches.slice(indexOfFirstItem, indexOfLastItem);\r\n  const totalPages = Math.ceil(employesAffiches.length / itemsPerPage);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Sauvegarder l'employ√© (ajout ou modification)\r\n  const sauvegarderEmploye = async () => {\r\n    // Validation des champs obligatoires\r\n    if (\r\n      !employeActuel.nom ||\r\n      !employeActuel.prenom ||\r\n      !employeActuel.email ||\r\n      !employeActuel.telephone ||\r\n      !employeActuel.departement ||\r\n      !employeActuel.sexe\r\n    ) {\r\n      afficherToast(\"Veuillez remplir tous les champs obligatoires (*)\", \"error\");\r\n      return;\r\n    }\r\n\r\n    // Validation nom et pr√©nom alphab√©tiques\r\n    if (!isAlpha(employeActuel.nom)) {\r\n      afficherToast(\"Le nom ne doit contenir que des lettres\", \"error\");\r\n      return;\r\n    }\r\n\r\n    if (!isAlpha(employeActuel.prenom)) {\r\n      afficherToast(\"Le pr√©nom ne doit contenir que des lettres\", \"error\");\r\n      return;\r\n    }\r\n\r\n    // Validation email\r\n    if (!isEmailValid(employeActuel.email)) {\r\n      afficherToast(\"Veuillez entrer une adresse email valide (ex: exemple@domaine.com)\", \"error\");\r\n      return;\r\n    }\r\n\r\n    // Validation t√©l√©phone\r\n    if (!isPhoneValid(employeActuel.telephone)) {\r\n      afficherToast(\r\n        \"Le num√©ro de t√©l√©phone doit contenir exactement 8 chiffres et commencer par 2, 5, 7 ou 9\",\r\n        \"error\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Validation salaire\r\n    if (employeActuel.salaire && (isNaN(employeActuel.salaire) || employeActuel.salaire < 0)) {\r\n      afficherToast(\"Le salaire doit √™tre un nombre positif (ex: 1500)\", \"error\");\r\n      return;\r\n    }\r\n\r\n    // Validation solde cong√©\r\n    if (employeActuel.soldeConge < 0 || !Number.isInteger(Number(employeActuel.soldeConge))) {\r\n      afficherToast(\"Le solde de cong√© doit √™tre un nombre entier positif (ex: 30)\", \"error\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Pr√©parer les donn√©es pour l'envoi\r\n      const employeData = {\r\n        nom: employeActuel.nom,\r\n        prenom: employeActuel.prenom,\r\n        email: employeActuel.email,\r\n        tel: employeActuel.telephone,\r\n        password: employeActuel.password,\r\n        departement: employeActuel.departement,\r\n        sexe: employeActuel.sexe.toLowerCase(),\r\n        soldedeconge: employeActuel.soldeConge,\r\n        salaire: employeActuel.salaire,\r\n      };\r\n\r\n      if (employeActuel._id) {\r\n        // Modification\r\n        await axios.put(`/api/updatepersonnel/${employeActuel._id}`, employeData);\r\n        afficherToast(\"Employ√© modifi√© avec succ√®s\", \"success\");\r\n      } else {\r\n        // Ajout\r\n        await axios.post(\"/api/addPersonnel\", employeData);\r\n        afficherToast(\"Employ√© ajout√© avec succ√®s\", \"success\");\r\n      }\r\n\r\n      // Recharger les donn√©es\r\n      const { data } = await axios.get(\"/api/allpersonnel\");\r\n      const filteredEmployes = data.filter(employe => \r\n        !employe.role || employe.role.toLowerCase() !== \"drh\"\r\n      );\r\n      setEmployes(filteredEmployes);\r\n      fermerModal();\r\n    } catch (error) {\r\n      console.error(\"Erreur:\", error);\r\n      let errorMessage = \"Erreur lors de l'op√©ration\";\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 409) {\r\n          errorMessage = \"Cet email est d√©j√† utilis√© par un autre personnel\";\r\n        } else if (error.response.data && error.response.data.error) {\r\n          errorMessage = error.response.data.error;\r\n        }\r\n      }\r\n      \r\n      afficherToast(\"Cet email est d√©j√† utilis√© par un autre personnel\", \"error\");\r\n    }\r\n  };\r\n\r\n  // Supprimer un employ√©\r\n  const confirmerSuppression = async () => {\r\n    if (!employeASupprimer) return;\r\n\r\n    try {\r\n      await axios.delete(`/api/deletepersonnel/${employeASupprimer._id}`);\r\n      \r\n      // Recharger les donn√©es\r\n      const { data } = await axios.get(\"/api/allpersonnel\");\r\n      const filteredEmployes = data.filter(employe => \r\n        !employe.role || employe.role.toLowerCase() !== \"drh\"\r\n      );\r\n      setEmployes(filteredEmployes);\r\n      \r\n      afficherToast(\"Employ√© supprim√© avec succ√®s\", \"success\");\r\n      fermerSuppressionModal();\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression:\", error);\r\n      let errorMessage = \"Erreur lors de la suppression\";\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 404) {\r\n          errorMessage = \"Employ√© introuvable - peut-√™tre d√©j√† supprim√©\";\r\n        } else if (error.response.data && error.response.data.error) {\r\n          errorMessage = error.response.data.error;\r\n        }\r\n      }\r\n      \r\n      afficherToast(errorMessage, \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded\">\r\n        <div className=\"gp-personnel-container\">\r\n          <div className=\"gp-header-section\">\r\n            <h1\r\n              className=\"gp-modal-title\"\r\n              style={{ fontSize: \"1.5rem\", marginBottom: \"1.5rem\" }}\r\n            >\r\n              Gestion du Personnel\r\n            </h1>\r\n\r\n            <div className=\"gp-search-container\">\r\n              <div className=\"gp-search-input\">\r\n                <div className=\"gp-search-icon\">\r\n                  <Search size={20} />\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder={`Rechercher par ${\r\n                    filtreType === \"nom\" ? \"nom\" : \"ID\"\r\n                  }`}\r\n                  value={recherche}\r\n                  onChange={(e) => setRecherche(e.target.value)}\r\n                  className=\"gp-form-input\"\r\n                  style={{ paddingLeft: \"2.5rem\" }}\r\n                />\r\n              </div>\r\n\r\n              <div\r\n                style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\r\n              >\r\n                <Filter size={20} style={{ color: \"#9ca3af\" }} />\r\n                <select\r\n                  value={filtreType}\r\n                  onChange={(e) => setFiltreType(e.target.value)}\r\n                  className=\"gp-form-select\"\r\n                >\r\n                  <option value=\"nom\">Filtrer par Nom</option>\r\n                  <option value=\"id\">Filtrer par ID</option>\r\n                </select>\r\n              </div>\r\n\r\n              <button onClick={() => ouvrirModal()} className=\"gp-add-button\">\r\n                <Plus size={20} />\r\n                Ajouter\r\n              </button>\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1.5rem\",\r\n                borderBottom: \"1px solid #e5e7eb\",\r\n              }}\r\n            >\r\n              <button\r\n                className={`gp-tab-button ${\r\n                  filtreDepartement === \"tous\" ? \"gp-active\" : \"\"\r\n                }`}\r\n                onClick={() => setFiltreDepartement(\"tous\")}\r\n              >\r\n                Tous\r\n              </button>\r\n              {departements.map((dept) => (\r\n                <button\r\n                  key={dept._id}\r\n                  className={`gp-tab-button ${\r\n                    filtreDepartement === dept.nom ? \"gp-active\" : \"\"\r\n                  }`}\r\n                  onClick={() => setFiltreDepartement(dept.nom)}\r\n                >\r\n                  {dept.nom}\r\n                </button>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Tableau des employ√©s */}\r\n            <div className=\"gp-table-container\">\r\n              <table className=\"gp-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"gp-th\">Nom</th>\r\n                    <th className=\"gp-th\">Pr√©nom</th>\r\n                    <th className=\"gp-th\">Email</th>\r\n                    <th className=\"gp-th\">T√©l√©phone</th>\r\n                    <th className=\"gp-th\">D√©partement</th>\r\n                    <th className=\"gp-th\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentItems.length > 0 ? (\r\n                    currentItems.map((employe, index) => (\r\n                      <tr key={index} className=\"gp-tr\">\r\n                        <td className=\"gp-td\">{employe.nom}</td>\r\n                        <td className=\"gp-td\">{employe.prenom}</td>\r\n                        <td className=\"gp-td\">{employe.email}</td>\r\n                        <td className=\"gp-td\">{employe.tel}</td>\r\n                        <td className=\"gp-td\">\r\n                          <span className=\"gp-department-badge\">\r\n                            {employe.departement}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"gp-td\">\r\n                          <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n                            <button\r\n                              onClick={() => ouvrirDetailsModal(employe)}\r\n                              className=\"gp-action-button gp-view-button\"\r\n                              title=\"Voir d√©tails\"\r\n                            >\r\n                              <Eye size={18} />\r\n                            </button>\r\n                            <button\r\n                              onClick={() => ouvrirModal(employe)}\r\n                              className=\"gp-action-button gp-edit-button\"\r\n                              title=\"Modifier\"\r\n                            >\r\n                              <Edit size={18} />\r\n                            </button>\r\n                            <button\r\n                              onClick={() => ouvrirSuppressionModal(employe)}\r\n                              className=\"gp-action-button gp-delete-button\"\r\n                              title=\"Supprimer\"\r\n                            >\r\n                              <Trash size={18} />\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        className=\"gp-td\"\r\n                        colSpan=\"6\"\r\n                        style={{ textAlign: \"center\" }}\r\n                      >\r\n                        Aucun employ√© trouv√©\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"gp-pagination\">\r\n              <div style={{ fontSize: \"0.875rem\", color: \"#6b7280\" }}>\r\n                Affichage de {indexOfFirstItem + 1} √†{\" \"}\r\n                {Math.min(indexOfLastItem, employesAffiches.length)} sur{\" \"}\r\n                {employesAffiches.length} employ√©s\r\n              </div>\r\n              <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n                <button \r\n                  onClick={() => paginate(currentPage - 1)} \r\n                  className=\"gp-page-button\" \r\n                  disabled={currentPage === 1}\r\n                >\r\n                  Pr√©c√©dent\r\n                </button>\r\n                \r\n                {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (\r\n                  <button\r\n                    key={number}\r\n                    onClick={() => paginate(number)}\r\n                    className={`gp-page-button ${currentPage === number ? \"gp-active\" : \"\"}`}\r\n                  >\r\n                    {number}\r\n                  </button>\r\n                ))}\r\n                \r\n                <button \r\n                  onClick={() => paginate(currentPage + 1)} \r\n                  className=\"gp-page-button\" \r\n                  disabled={currentPage === totalPages}\r\n                >\r\n                  Suivant\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Modal d'ajout/modification d'employ√© */}\r\n        {modalOuvert && employeActuel && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\">\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">\r\n                  {employeActuel.nom\r\n                    ? `Modifier ${employeActuel.prenom} ${employeActuel.nom}`\r\n                    : \"Ajouter un employ√©\"}\r\n                </h2>\r\n                <button onClick={fermerModal} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">ID</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"id\"\r\n                    value={employeActuel._id}\r\n                    onChange={handleChange}\r\n                    className=\"gp-form-input\"\r\n                    disabled\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Nom *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"nom\"\r\n                    value={employeActuel.nom}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.nom && !isAlpha(employeActuel.nom) ? 'gp-input-error' : ''\r\n                    }`}\r\n                    required\r\n                  />\r\n                  {employeActuel.nom && !isAlpha(employeActuel.nom) && (\r\n                    <p className=\"gp-error-message\">Le nom ne doit contenir que des lettres</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Pr√©nom *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"prenom\"\r\n                    value={employeActuel.prenom}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.prenom && !isAlpha(employeActuel.prenom) ? 'gp-input-error' : ''\r\n                    }`}\r\n                    required\r\n                  />\r\n                  {employeActuel.prenom && !isAlpha(employeActuel.prenom) && (\r\n                    <p className=\"gp-error-message\">Le pr√©nom ne doit contenir que des lettres</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Email *</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={employeActuel.email}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.email && !isEmailValid(employeActuel.email) ? 'gp-input-error' : ''\r\n                    }`}\r\n                    required\r\n                  />\r\n                  {employeActuel.email && !isEmailValid(employeActuel.email) && (\r\n                    <p className=\"gp-error-message\">Format d'email invalide (ex: exemple@domaine.com)</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">T√©l√©phone *</label>\r\n                  <input\r\n                    type=\"tel\"\r\n                    name=\"telephone\"\r\n                    value={employeActuel.telephone}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.telephone && !isPhoneValid(employeActuel.telephone) ? 'gp-input-error' : ''\r\n                    }`}\r\n                    required\r\n                    placeholder=\"Ex: 50123456\"\r\n                  />\r\n                  {employeActuel.telephone && !isPhoneValid(employeActuel.telephone) && (\r\n                    <p className=\"gp-error-message\">\r\n                      Doit contenir exactement 8 chiffres et commencer par 2, 5, 7 ou 9\r\n                    </p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">D√©partement *</label>\r\n                  <select\r\n                    name=\"departement\"\r\n                    value={employeActuel.departement}\r\n                    onChange={handleChange}\r\n                    className=\"gp-form-select\"\r\n                    required\r\n                  >\r\n                    <option value=\"\">S√©lectionnez un d√©partement</option>\r\n                    {departements.map((dept) => (\r\n                      <option key={dept._id} value={dept.nom}>\r\n                        {dept.nom}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Sexe *</label>\r\n                  <select\r\n                    name=\"sexe\"\r\n                    value={employeActuel.sexe}\r\n                    onChange={handleChange}\r\n                    className=\"gp-form-select\"\r\n                    required\r\n                  >\r\n                    <option value=\"\">S√©lectionnez le sexe</option>\r\n                    <option value=\"Homme\">Homme</option>\r\n                    <option value=\"Femme\">Femme</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Salaire (TND) *</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"salaire\"\r\n                    value={employeActuel.salaire}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.salaire && (isNaN(employeActuel.salaire)) || employeActuel.salaire < 0 ? 'gp-input-error' : ''\r\n                    }`}\r\n                    placeholder=\"Salaire mensuel en TND\"\r\n                    required\r\n                  />\r\n                  {employeActuel.salaire && (isNaN(employeActuel.salaire) || employeActuel.salaire < 0) && (\r\n                    <p className=\"gp-error-message\">Doit √™tre un nombre positif (ex: 1500)</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Solde de cong√© *</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"soldeConge\"\r\n                    value={employeActuel.soldeConge}\r\n                    onChange={handleChange}\r\n                    className={`gp-form-input ${\r\n                      employeActuel.soldeConge < 0 || !Number.isInteger(Number(employeActuel.soldeConge)) ? 'gp-input-error' : ''\r\n                    }`}\r\n                    placeholder=\"Jours de cong√©s restants\"\r\n                    required\r\n                  />\r\n                  {(employeActuel.soldeConge < 0 || !Number.isInteger(Number(employeActuel.soldeConge))) && (\r\n                    <p className=\"gp-error-message\">Doit √™tre un nombre entier positif (ex: 30)</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Mot de passe</label>\r\n                  <div className=\"gp-password-container\">\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"password\"\r\n                      value={employeActuel.password}\r\n                      onChange={handleChange}\r\n                      className=\"gp-form-input gp-password-input\"\r\n                      readOnly\r\n                    />\r\n                    <button\r\n                      onClick={copierMotDePasse}\r\n                      className=\"gp-copy-button\"\r\n                      title=\"Copier le mot de passe\"\r\n                    >\r\n                      <Copy size={18} />\r\n                    </button>\r\n                  </div>\r\n                  <button\r\n                    onClick={genererNouveauMotDePasse}\r\n                    className=\"gp-generate-button\"\r\n                  >\r\n                    G√©n√©rer un nouveau mot de passe\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"gp-modal-footer\">\r\n                <button onClick={fermerModal} className=\"gp-btn gp-btn-cancel\">\r\n                  Annuler\r\n                </button>\r\n                <button\r\n                  onClick={sauvegarderEmploye}\r\n                  className=\"gp-btn gp-btn-save\"\r\n                >\r\n                  Sauvegarder\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Modal de d√©tails d'employ√© */}\r\n        {detailsModalOuvert && (\r\n          <DetailsModal employe={employeDetails} onClose={fermerDetailsModal} />\r\n        )}\r\n\r\n        {/* Modal de confirmation de suppression */}\r\n        {suppressionModalOuvert && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\" style={{ maxWidth: \"28rem\" }}>\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">Confirmer la suppression</h2>\r\n                <button\r\n                  onClick={fermerSuppressionModal}\r\n                  className=\"gp-modal-close\"\r\n                >\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ marginBottom: \"1.5rem\", color: \"#4b5563\" }}>\r\n                √ätes-vous s√ªr de vouloir supprimer l'employ√©{\" \"}\r\n                <strong>\r\n                  {employeASupprimer?.prenom} {employeASupprimer?.nom}\r\n                </strong>{\" \"}\r\n                ? Cette action est irr√©versible.\r\n              </div>\r\n\r\n              <div className=\"gp-modal-footer\">\r\n                <button\r\n                  onClick={fermerSuppressionModal}\r\n                  className=\"gp-btn gp-btn-cancel\"\r\n                >\r\n                  Annuler\r\n                </button>\r\n                <button\r\n                  onClick={confirmerSuppression}\r\n                  className=\"gp-btn gp-btn-save\"\r\n                  style={{ backgroundColor: \"#ef4444\", borderColor: \"#ef4444\" }}\r\n                >\r\n                  Supprimer\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Toast pour les notifications */}\r\n        {toast.affiche && (\r\n          <Toast\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={fermerToast}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDepartment.js",["222"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Search, Edit, Trash, Plus, X, Check, Filter } from \"lucide-react\";\r\nimport axios from \"axios\";\r\n\r\n// CSS encapsul√© avec pr√©fixe \"gp-\" (coh√©rent avec Gestion Personnel)\r\nconst encapsulatedStyles = `\r\n  .gp-department-container {\r\n    background: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .gp-header-section {\r\n    padding: 1.5rem;\r\n    border-bottom: 1px solid #e2e8f0;\r\n  }\r\n  \r\n  .gp-search-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gp-search-input {\r\n    flex: 1;\r\n    position: relative;\r\n  }\r\n  \r\n  .gp-search-icon {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    color: #9ca3af;\r\n  }\r\n  \r\n  .gp-tab-button {\r\n    padding: 0.5rem 1rem;\r\n    border-bottom: 2px solid transparent;\r\n    color: #6b7280;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-tab-button.gp-active {\r\n    border-bottom-color: #14b8a6;\r\n    color: #14b8a6;\r\n  }\r\n  \r\n  .gp-tab-button:hover:not(.gp-active) {\r\n    color: #374151;\r\n  }\r\n  \r\n  .gp-table-container {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .gp-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  .gp-th {\r\n    text-align: left;\r\n    padding: 0.75rem 1rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    color: #6b7280;\r\n    background-color: #f9fafb;\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gp-td {\r\n    padding: 1rem;\r\n    vertical-align: middle;\r\n    color: #374151;\r\n    border-bottom: 1px solid #f3f4f6;\r\n  }\r\n  \r\n  .gp-tr:hover {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .gp-department-badge {\r\n    background-color: #e6fffa;\r\n    color: #047857;\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .gp-action-button {\r\n    padding: 0.375rem;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-edit-button {\r\n    background-color: #dbeafe;\r\n    color: #3b82f6;\r\n  }\r\n  \r\n  .gp-edit-button:hover {\r\n    background-color: #bfdbfe;\r\n  }\r\n  \r\n  .gp-delete-button {\r\n    background-color: #fee2e2;\r\n    color: #ef4444;\r\n  }\r\n  \r\n  .gp-delete-button:hover {\r\n    background-color: #fecaca;\r\n  }\r\n  \r\n  .gp-add-button {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-add-button:hover {\r\n    background-color: #0d9488;\r\n  }\r\n  \r\n  .gp-pagination {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-top: 1.5rem;\r\n    padding: 0 1rem;\r\n  }\r\n  \r\n  .gp-page-button {\r\n    padding: 0.375rem 0.75rem;\r\n    border: 1px solid #e5e7eb;\r\n    border-radius: 0.375rem;\r\n    font-size: 0.875rem;\r\n    transition: all 0.2s ease;\r\n    background: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .gp-page-button.gp-active {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border-color: #14b8a6;\r\n  }\r\n  \r\n  .gp-page-button:hover:not(.gp-active) {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .gp-page-button:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n  \r\n  .gp-modal-overlay {\r\n    position: fixed;\r\n    inset: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1rem;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gp-modal-container {\r\n    background-color: white;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    padding: 1.5rem;\r\n    width: 100%;\r\n    max-width: 28rem;\r\n  }\r\n  \r\n  .gp-modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gp-modal-title {\r\n    font-size: 1.25rem;\r\n    font-weight: 700;\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gp-modal-close {\r\n    color: #6b7280;\r\n    transition: color 0.2s ease;\r\n  }\r\n  \r\n  .gp-modal-close:hover {\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gp-form-group {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .gp-form-label {\r\n    display: block;\r\n    margin-bottom: 0.25rem;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    color: #374151;\r\n  }\r\n  \r\n  .gp-form-input {\r\n    width: 100%;\r\n    padding: 0.5rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-form-input:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gp-form-select {\r\n    width: 100%;\r\n    padding: 1 rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-form-select:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gp-modal-footer {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 0.5rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .gp-btn {\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-btn-cancel {\r\n    background-color: #f3f4f6;\r\n    color: #374151;\r\n  }\r\n  \r\n  .gp-btn-cancel:hover {\r\n    background-color: #e5e7eb;\r\n  }\r\n  \r\n  .gp-btn-save {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n  }\r\n  \r\n  .gp-btn-save:hover {\r\n    background-color: #0d9488;\r\n  }\r\n  \r\n  .gp-toast {\r\n    position: fixed;\r\n    bottom: 1rem;\r\n    right: 1rem;\r\n    padding: 1rem;\r\n    border-radius: 0.375rem;\r\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    color: white;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gp-toast-success {\r\n    background-color: #10b981;\r\n  }\r\n  \r\n  .gp-toast-error {\r\n    background-color: #ef4444;\r\n  }\r\n`;\r\n\r\n// Toast component for notifications\r\nconst Toast = ({ message, type, onClose }) => {\r\n  const toastClass =\r\n    type === \"success\"\r\n      ? \"gp-toast-success\"\r\n      : type === \"error\"\r\n      ? \"gp-toast-error\"\r\n      : \"gp-toast-info\";\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onClose();\r\n    }, 3000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <div className={`gp-toast ${toastClass}`}>\r\n      {type === \"success\" && <Check size={20} />}\r\n      {type === \"error\" && <X size={20} />}\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CardDepartment({ color = \"light\" }) {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState(\"\");\r\n  const [departments, setDepartments] = useState([]);\r\n  const [modalOuvert, setModalOuvert] = useState(false);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n  const [selectedDepartmentId, setSelectedDepartmentId] = useState(null);\r\n  const [selectedDepartmentName, setSelectedDepartmentName] = useState(\"\");\r\n  const [newDepartment, setNewDepartment] = useState({\r\n    nom: \"\",\r\n  });\r\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [toast, setToast] = useState({ affiche: false, message: \"\", type: \"\" });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [departmentsPerPage] = useState(5);\r\n\r\n  // Fetch departments on component mount\r\n  useEffect(() => {\r\n    fetchDepartments();\r\n  }, []);\r\n\r\n  // Fetch all departments\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get(`/api/alldepartment`);\r\n      setDepartments(response.data);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error);\r\n      afficherToast(\"Erreur lors du chargement des d√©partements\", \"error\");\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Filter and sort departments\r\n  const filteredDepartments = departments\r\n    .filter((department) => {\r\n      if (!isNaN(searchTerm) && searchTerm !== \"\") {\r\n        return department._id.toString().includes(searchTerm);\r\n      }\r\n      return department.nom.toLowerCase().includes(searchTerm.toLowerCase());\r\n    })\r\n    .sort((a, b) => {\r\n      if (!sortOption) return 0;\r\n      if (sortOption === \"id-asc\") return a._id.localeCompare(b._id);\r\n      if (sortOption === \"id-desc\") return b._id.localeCompare(a._id);\r\n      if (sortOption === \"departement\") return a.nom.localeCompare(b.nom);\r\n      return 0;\r\n    });\r\n\r\n  // Get current departments for pagination\r\n  const indexOfLastDepartment = currentPage * departmentsPerPage;\r\n  const indexOfFirstDepartment = indexOfLastDepartment - departmentsPerPage;\r\n  const currentDepartments = filteredDepartments.slice(\r\n    indexOfFirstDepartment,\r\n    indexOfLastDepartment\r\n  );\r\n  const totalPages = Math.ceil(filteredDepartments.length / departmentsPerPage);\r\n\r\n  // Reset to first page when filters change\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [searchTerm, sortOption, departments]);\r\n\r\n  // Display a toast notification\r\n  const afficherToast = (message, type) => {\r\n    setToast({ affiche: true, message, type });\r\n  };\r\n\r\n  // Close toast\r\n  const fermerToast = () => {\r\n    setToast({ ...toast, affiche: false });\r\n  };\r\n\r\n  const handleAction = (action, id, nom) => {\r\n    switch (action) {\r\n      case \"modifier\":\r\n        const departmentToEdit = departments.find(\r\n          (department) => department._id === id\r\n        );\r\n        setSelectedDepartment(departmentToEdit);\r\n        setIsEditModalOpen(true);\r\n        break;\r\n      case \"supprimer\":\r\n        setSelectedDepartmentId(id);\r\n        setSelectedDepartmentName(nom);\r\n        setModalOuvert(true);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    try {\r\n      await axios.delete(\r\n        `/api/deletedepartment/${selectedDepartmentId}`\r\n      );\r\n      setDepartments(\r\n        departments.filter(\r\n          (department) => department._id !== selectedDepartmentId\r\n        )\r\n      );\r\n      setModalOuvert(false);\r\n      setSelectedDepartmentName(\"\");\r\n      afficherToast(\"D√©partement supprim√© avec succ√®s\", \"success\");\r\n    } catch (error) {\r\n      console.error(\"Error deleting department:\", error);\r\n      afficherToast(\"Erreur lors de la suppression du d√©partement\", \"error\");\r\n    }\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setModalOuvert(false);\r\n    setSelectedDepartmentName(\"\");\r\n  };\r\n\r\n  const handleAddDepartment = () => {\r\n    setNewDepartment({ nom: \"\" });\r\n    setSelectedDepartmentId(null);\r\n    setIsEditModalOpen(false);\r\n    setModalOuvert(true);\r\n  };\r\n\r\n  const validateForm = (department) => {\r\n    const newErrors = {};\r\n    if (!department.nom)\r\n      newErrors.nom = \"Le nom du d√©partement est obligatoire.\";\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleModalSubmit = async () => {\r\n    if (!validateForm(newDepartment)) return;\r\n\r\n    try {\r\n      const response = await axios.post(`/api/adddepartment`, {\r\n        nom: newDepartment.nom,\r\n      });\r\n\r\n      setDepartments([...departments, response.data]);\r\n      setModalOuvert(false);\r\n      setNewDepartment({\r\n        nom: \"\",\r\n      });\r\n      setErrors({});\r\n      afficherToast(\"D√©partement ajout√© avec succ√®s\", \"success\");\r\n    } catch (error) {\r\n      console.error(\"Error adding department:\", error);\r\n      afficherToast(\"Erreur lors de l'ajout du d√©partement\", \"error\");\r\n    }\r\n  };\r\n\r\n  const handleModalCancel = () => {\r\n    setModalOuvert(false);\r\n    setNewDepartment({\r\n      nom: \"\",\r\n    });\r\n    setErrors({});\r\n  };\r\n\r\n  const handleEditSubmit = async () => {\r\n    if (!validateForm(selectedDepartment)) return;\r\n\r\n    try {\r\n      await axios.put(\r\n        `/api/updatedepartment/${selectedDepartment._id}`,\r\n        {\r\n          nom: selectedDepartment.nom,\r\n        }\r\n      );\r\n\r\n      const updatedDepartments = departments.map((department) =>\r\n        department._id === selectedDepartment._id\r\n          ? { ...selectedDepartment }\r\n          : department\r\n      );\r\n\r\n      setDepartments(updatedDepartments);\r\n      setIsEditModalOpen(false);\r\n      afficherToast(\"D√©partement modifi√© avec succ√®s\", \"success\");\r\n    } catch (error) {\r\n      console.error(\"Error updating department:\", error);\r\n      afficherToast(\"Erreur lors de la modification du d√©partement\", \"error\");\r\n    }\r\n  };\r\n\r\n  const handleEditCancel = () => {\r\n    setIsEditModalOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (isEditModalOpen) {\r\n      setSelectedDepartment((prev) => ({ ...prev, [name]: value }));\r\n    } else {\r\n      setNewDepartment((prev) => ({ ...prev, [name]: value }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style>{encapsulatedStyles}</style>\r\n      <div\r\n        className={\r\n          \"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded\"\r\n        }\r\n      >\r\n        <div className=\"gp-department-container\">\r\n          <div className=\"gp-header-section\">\r\n            <h1\r\n              className=\"gp-modal-title\"\r\n              style={{ fontSize: \"1.5rem\", marginBottom: \"1.5rem\" }}\r\n            >\r\n              Gestion des D√©partements\r\n            </h1>\r\n\r\n            {/* Search and filter section */}\r\n            <div className=\"gp-search-container\">\r\n              <div className=\"gp-search-input\">\r\n                <div className=\"gp-search-icon\">\r\n                  <Search size={20} />\r\n                </div>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Rechercher par nom ou ID\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"gp-form-input\"\r\n                  style={{ paddingLeft: \"2.5rem\" }}\r\n                />\r\n              </div>\r\n\r\n              <div\r\n                style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\r\n              >\r\n                <Filter size={20} style={{ color: \"#9ca3af\" }} />\r\n                <select\r\n                  value={sortOption}\r\n                  onChange={(e) => setSortOption(e.target.value)}\r\n                  className=\"gp-form-select\"\r\n                >\r\n                  <option value=\"\">Filtrer par</option>\r\n                  <option value=\"id-asc\">ID Ascendant</option>\r\n                  <option value=\"id-desc\">ID Descendant</option>\r\n                  <option value=\"departement\">Par D√©partement</option>\r\n                </select>\r\n              </div>\r\n\r\n              <button onClick={handleAddDepartment} className=\"gp-add-button\">\r\n                <Plus size={20} />\r\n                Ajouter\r\n              </button>\r\n            </div>\r\n\r\n            {/* Departments table */}\r\n            <div className=\"gp-table-container\">\r\n              <table className=\"gp-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"gp-th\">ID</th>\r\n                    <th className=\"gp-th\">D√©partement</th>\r\n                    <th className=\"gp-th\" style={{ textAlign: \"center\" }}>\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isLoading ? (\r\n                    <tr>\r\n                      <td\r\n                        colSpan=\"3\"\r\n                        className=\"gp-td\"\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          color: \"#6b7280\",\r\n                          padding: \"1.5rem 0\",\r\n                        }}\r\n                      >\r\n                        Chargement des d√©partements...\r\n                      </td>\r\n                    </tr>\r\n                  ) : currentDepartments.length > 0 ? (\r\n                    currentDepartments.map((department) => (\r\n                      <tr className=\"gp-tr\" key={department._id}>\r\n                        <td className=\"gp-td\">\r\n                          {department._id.substring(0, 8)}...\r\n                        </td>\r\n                        <td className=\"gp-td\">\r\n                          <span className=\"gp-department-badge\">\r\n                            {department.nom}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"gp-td\">\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"center\",\r\n                              gap: \"0.5rem\",\r\n                            }}\r\n                          >\r\n                            <button\r\n                              onClick={() =>\r\n                                handleAction(\r\n                                  \"modifier\",\r\n                                  department._id,\r\n                                  department.nom\r\n                                )\r\n                              }\r\n                              className=\"gp-action-button gp-edit-button\"\r\n                              title=\"Modifier\"\r\n                            >\r\n                              <Edit size={16} />\r\n                            </button>\r\n                            <button\r\n                              onClick={() =>\r\n                                handleAction(\r\n                                  \"supprimer\",\r\n                                  department._id,\r\n                                  department.nom\r\n                                )\r\n                              }\r\n                              className=\"gp-action-button gp-delete-button\"\r\n                              title=\"Supprimer\"\r\n                            >\r\n                              <Trash size={16} />\r\n                            </button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan=\"3\"\r\n                        className=\"gp-td\"\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          color: \"#6b7280\",\r\n                          padding: \"1.5rem 0\",\r\n                        }}\r\n                      >\r\n                        Aucun d√©partement trouv√©\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            {/* Pagination */}\r\n            <div className=\"gp-pagination\">\r\n              <div style={{ fontSize: \"0.875rem\", color: \"#6b7280\" }}>\r\n                Affichage de {indexOfFirstDepartment + 1}-\r\n                {Math.min(indexOfLastDepartment, filteredDepartments.length)} sur{\" \"}\r\n                {filteredDepartments.length} d√©partements\r\n              </div>\r\n              <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n                <button\r\n                  className=\"gp-page-button\"\r\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\r\n                  disabled={currentPage === 1}\r\n                >\r\n                  Pr√©c√©dent\r\n                </button>\r\n                \r\n                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\r\n                  <button\r\n                    key={page}\r\n                    className={`gp-page-button ${currentPage === page ? 'gp-active' : ''}`}\r\n                    onClick={() => setCurrentPage(page)}\r\n                  >\r\n                    {page}\r\n                  </button>\r\n                ))}\r\n                \r\n                <button\r\n                  className=\"gp-page-button\"\r\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\r\n                  disabled={currentPage === totalPages}\r\n                >\r\n                  Suivant\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Delete department modal */}\r\n        {modalOuvert && selectedDepartmentId && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\">\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">Confirmation de suppression</h2>\r\n                <button onClick={handleCancelDelete} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                <p style={{ marginBottom: \"1.5rem\", color: \"#4b5563\" }}>\r\n                  √ätes-vous s√ªr de vouloir supprimer le d√©partement{\" \"}\r\n                  <strong>{selectedDepartmentName}</strong> ?\r\n                </p>\r\n\r\n                <div className=\"gp-modal-footer\">\r\n                  <button\r\n                    onClick={handleCancelDelete}\r\n                    className=\"gp-btn gp-btn-cancel\"\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button\r\n                    onClick={handleConfirmDelete}\r\n                    className=\"gp-btn gp-btn-save\"\r\n                    style={{\r\n                      backgroundColor: \"#ef4444\",\r\n                      borderColor: \"#ef4444\",\r\n                    }}\r\n                  >\r\n                    Supprimer\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Add department modal */}\r\n        {modalOuvert && !selectedDepartmentId && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\">\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">Ajouter un d√©partement</h2>\r\n                <button onClick={handleModalCancel} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Nom du d√©partement</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"nom\"\r\n                    value={newDepartment.nom}\r\n                    onChange={handleChange}\r\n                    className=\"gp-form-input\"\r\n                  />\r\n                  {errors.nom && (\r\n                    <p\r\n                      style={{\r\n                        color: \"#ef4444\",\r\n                        fontSize: \"0.75rem\",\r\n                        marginTop: \"0.25rem\",\r\n                      }}\r\n                    >\r\n                      {errors.nom}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-modal-footer\">\r\n                  <button\r\n                    onClick={handleModalCancel}\r\n                    className=\"gp-btn gp-btn-cancel\"\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button\r\n                    onClick={handleModalSubmit}\r\n                    className=\"gp-btn gp-btn-save\"\r\n                  >\r\n                    Ajouter\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Edit department modal */}\r\n        {isEditModalOpen && selectedDepartment && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\">\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">Modifier le d√©partement</h2>\r\n                <button onClick={handleEditCancel} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">ID</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={selectedDepartment._id}\r\n                    disabled\r\n                    className=\"gp-form-input\"\r\n                    style={{ backgroundColor: \"#f3f4f6\" }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"gp-form-group\">\r\n                  <label className=\"gp-form-label\">Nom du d√©partement</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"nom\"\r\n                    value={selectedDepartment.nom}\r\n                    onChange={handleChange}\r\n                    className=\"gp-form-input\"\r\n                  />\r\n                  {errors.nom && (\r\n                    <p\r\n                      style={{\r\n                        color: \"#ef4444\",\r\n                        fontSize: \"0.75rem\",\r\n                        marginTop: \"0.25rem\",\r\n                      }}\r\n                    >\r\n                      {errors.nom}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"gp-modal-footer\">\r\n                  <button\r\n                    onClick={handleEditCancel}\r\n                    className=\"gp-btn gp-btn-cancel\"\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button\r\n                    onClick={handleEditSubmit}\r\n                    className=\"gp-btn gp-btn-save\"\r\n                  >\r\n                    Enregistrer\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Toast notifications */}\r\n        {toast.affiche && (\r\n          <Toast\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={fermerToast}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCardDepartment.propTypes = {\r\n  color: PropTypes.string,\r\n};","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardCondidature.js",["223","224"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Search, Check, X, Eye, Filter } from \"lucide-react\";\r\nimport axios from \"axios\";\r\n\r\nconst encapsulatedStyles = `\r\n  .gp-candidature-container {\r\n    background: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .gp-header-section {\r\n    padding: 1.5rem;\r\n    border-bottom: 1px solid #e2e8f0;\r\n  }\r\n  \r\n  .gp-search-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 1rem;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gp-search-input {\r\n  position: relative;\r\n  flex-grow: 1; \r\n}\r\n\r\n.gp-search-icon {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  color: #9ca3af;\r\n  pointer-events: none; \r\n}\r\n\r\n.gp-input-field {\r\n  width: 100%;\r\n  padding: 0.5rem 0.75rem 0.5rem 2.5rem; \r\n  border: 1px solid #d1d5db;\r\n  border-radius: 0.375rem;\r\n  transition: all 0.2s ease;\r\n  font-size: 0.875rem; \r\n}\r\n  .gp-input-field:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gp-filter-dropdown {\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-filter-dropdown:focus {\r\n    outline: none;\r\n    border-color: #14b8a6;\r\n    box-shadow: 0 0 0 2px rgba(20, 184, 166, 0.2);\r\n  }\r\n  \r\n  .gp-table-container {\r\n    width: 100%;\r\n    overflow-x: auto;\r\n  }\r\n  \r\n  .gp-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  .gp-th {\r\n    text-align: left;\r\n    padding: 0.75rem 1rem;\r\n    font-size: 0.75rem;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    color: #6b7280;\r\n    background-color: #f9fafb;\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n  \r\n  .gp-td {\r\n    padding: 1rem;\r\n    vertical-align: middle;\r\n    color: #374151;\r\n    border-bottom: 1px solid #f3f4f6;\r\n  }\r\n  \r\n  .gp-tr:hover {\r\n    background-color: #f9fafb;\r\n  }\r\n  \r\n  .gp-status-badge {\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 9999px;\r\n    font-size: 0.75rem;\r\n    font-weight: 500;\r\n  }\r\n  \r\n  .gp-status-pending {\r\n    background-color: #fef3c7;\r\n    color: #d97706;\r\n  }\r\n  \r\n  .gp-status-accepted {\r\n    background-color: #d1fae5;\r\n    color: #059669;\r\n  }\r\n  \r\n  .gp-status-rejected {\r\n    background-color: #fee2e2;\r\n    color: #dc2626;\r\n  }\r\n  \r\n  .gp-action-button {\r\n    padding: 0.375rem;\r\n    border-radius: 0.375rem;\r\n    transition: all 0.2s ease;\r\n    margin-right: 0.5rem;\r\n  }\r\n  \r\n  .gp-accept-button {\r\n    background-color: #d1fae5;\r\n    color: #059669;\r\n  }\r\n  \r\n  .gp-accept-button:hover {\r\n    background-color: #a7f3d0;\r\n  }\r\n  \r\n  .gp-reject-button {\r\n    background-color: #fee2e2;\r\n    color: #dc2626;\r\n  }\r\n  \r\n  .gp-reject-button:hover {\r\n    background-color: #fecaca;\r\n  }\r\n  \r\n  .gp-view-button {\r\n    background-color: #dbeafe;\r\n    color: #3b82f6;\r\n  }\r\n  \r\n  .gp-view-button:hover {\r\n    background-color: #bfdbfe;\r\n  }\r\n  \r\n  .gp-pagination {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-top: 1.5rem;\r\n    padding: 0 1rem;\r\n  }\r\n  \r\n  .gp-page-button {\r\n    padding: 0.5rem 1rem;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 0.375rem;\r\n    background-color: white;\r\n    color: #4b5563;\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-page-button:hover {\r\n    background-color: #f3f4f6;\r\n  }\r\n  \r\n  .gp-page-button.gp-active {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n    border-color: #14b8a6;\r\n  }\r\n  \r\n  .gp-modal-overlay {\r\n    position: fixed;\r\n    inset: 0;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 1rem;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gp-modal-container {\r\n    background-color: white;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    padding: 1.5rem;\r\n    width: 100%;\r\n    max-width: 28rem;\r\n  }\r\n  \r\n  .gp-modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gp-modal-title {\r\n    font-size: 1.25rem;\r\n    font-weight: 700;\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gp-modal-close {\r\n    color: #6b7280;\r\n    transition: color 0.2s ease;\r\n  }\r\n  \r\n  .gp-modal-close:hover {\r\n    color: #1f2937;\r\n  }\r\n  \r\n  .gp-modal-footer {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 0.5rem;\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .gp-btn {\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    font-weight: 500;\r\n    transition: all 0.2s ease;\r\n  }\r\n  \r\n  .gp-btn-cancel {\r\n    background-color: #f3f4f6;\r\n    color: #374151;\r\n  }\r\n  \r\n  .gp-btn-cancel:hover {\r\n    background-color: #e5e7eb;\r\n  }\r\n  \r\n  .gp-btn-confirm {\r\n    background-color: #14b8a6;\r\n    color: white;\r\n  }\r\n  \r\n  .gp-btn-confirm:hover {\r\n    background-color: #0d9488;\r\n  }\r\n  \r\n  .gp-toast {\r\n    position: fixed;\r\n    bottom: 1rem;\r\n    right: 1rem;\r\n    padding: 1rem;\r\n    border-radius: 0.375rem;\r\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    color: white;\r\n    z-index: 50;\r\n  }\r\n  \r\n  .gp-toast-success {\r\n    background-color: #10b981;\r\n  }\r\n  \r\n  .gp-toast-error {\r\n    background-color: #ef4444;\r\n  }\r\n  \r\n  .gp-candidate-details {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n  \r\n  .gp-detail-item {\r\n    display: flex;\r\n    margin-bottom: 0.75rem;\r\n  }\r\n  \r\n  .gp-detail-label {\r\n    font-weight: 500;\r\n    color: #6b7280;\r\n    width: 120px;\r\n  }\r\n  \r\n  .gp-detail-value {\r\n    color: #374151;\r\n  }\r\n  \r\n  .gp-cv-download {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    color: #3b82f6;\r\n    font-weight: 500;\r\n    margin-top: 1rem;\r\n    text-decoration: none;\r\n  }\r\n  \r\n  .gp-cv-download:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\n// Toast component for notifications\r\nconst Toast = ({ message, type, onClose }) => {\r\n  const toastClass =\r\n    type === \"success\"\r\n      ? \"gp-toast-success\"\r\n      : type === \"error\"\r\n      ? \"gp-toast-error\"\r\n      : \"gp-toast-info\";\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onClose();\r\n    }, 3000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [onClose]);\r\n\r\n  return (\r\n    <div className={`gp-toast ${toastClass}`}>\r\n      {type === \"success\" && <Check size={20} />}\r\n      {type === \"error\" && <X size={20} />}\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CardCandidature({ color = \"light\" }) {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n  const [candidatures, setCandidatures] = useState([]);\r\n  const [selectedCandidature, setSelectedCandidature] = useState(null);\r\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\r\n  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false);\r\n  const [statusAction, setStatusAction] = useState(null);\r\n  const [toast, setToast] = useState({ affiche: false, message: \"\", type: \"\" });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n\r\n  // Fetch candidatures on component mount\r\n  useEffect(() => {\r\n    fetchCandidatures();\r\n  }, []);\r\n\r\n  const fetchCandidatures = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await axios.get(\"/api/allcondidature\");\r\n    \r\n      const formattedCandidatures = response.data.map(candidature => ({\r\n        ...candidature,\r\n        status: candidature.status || \"pending\",\r\n        // Si le poste n'existe pas dans les donn√©es, attribuer une valeur par d√©faut\r\n        poste: candidature.poste || \"Non sp√©cifi√©\"\r\n      }));\r\n      setCandidatures(formattedCandidatures);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching candidatures:\", error);\r\n      afficherToast(\"Erreur lors du chargement des candidatures\", \"error\");\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredCandidatures = candidatures\r\n    .filter((candidature) => {\r\n      // Filter by search term\r\n      const searchMatch = \r\n        candidature.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        candidature.prenom.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        candidature.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (candidature.posteTitle && candidature.posteTitle.toLowerCase().includes(searchTerm.toLowerCase()));\r\n      \r\n      // Filter by status\r\n      const statusMatch = \r\n        filterStatus === \"all\" || \r\n        candidature.status === filterStatus;\r\n      \r\n      return searchMatch && statusMatch;\r\n    })\r\n    .sort((a, b) => {\r\n      // Sort by date (newest first)\r\n      return new Date(b.createdAt) - new Date(a.createdAt);\r\n    });\r\n\r\n  // Pagination logic\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = filteredCandidatures.slice(indexOfFirstItem, indexOfLastItem);\r\n  const totalPages = Math.ceil(filteredCandidatures.length / itemsPerPage);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  const afficherToast = (message, type) => {\r\n    setToast({ affiche: true, message, type });\r\n  };\r\n\r\n  const fermerToast = () => {\r\n    setToast({ ...toast, affiche: false });\r\n  };\r\n\r\n  const handleViewCandidature = (candidature) => {\r\n    setSelectedCandidature(candidature);\r\n    setIsViewModalOpen(true);\r\n  };\r\n\r\n  const handleStatusAction = (action, candidature) => {\r\n    setSelectedCandidature(candidature);\r\n    setStatusAction(action);\r\n    setIsStatusModalOpen(true);\r\n  };\r\n\r\n  const handleConfirmStatusChange = async () => {\r\n    try {\r\n      // Update the status in the API\r\n      await axios.put(`/api/updatecondidature/${selectedCandidature._id}`, {\r\n        status: statusAction\r\n      });\r\n\r\n      // Update local state\r\n      const updatedCandidatures = candidatures.map((candidature) =>\r\n        candidature._id === selectedCandidature._id\r\n          ? { ...candidature, status: statusAction }\r\n          : candidature\r\n      );\r\n\r\n      setCandidatures(updatedCandidatures);\r\n      setIsStatusModalOpen(false);\r\n      \r\n      const actionText = statusAction === \"accepted\" ? \"accept√©e\" : \"refus√©e\";\r\n      afficherToast(`Candidature ${actionText} avec succ√®s`, \"success\");\r\n    } catch (error) {\r\n      console.error(\"Error updating candidature status:\", error);\r\n      afficherToast(\"Erreur lors de la mise √† jour du statut\", \"error\");\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString('fr-FR', options);\r\n  };\r\n\r\n  const getStatusBadge = (status) => {\r\n    switch(status) {\r\n      case 'accepted':\r\n        return <span className=\"gp-status-badge gp-status-accepted\">Accept√©e</span>;\r\n      case 'rejected':\r\n        return <span className=\"gp-status-badge gp-status-rejected\">Refus√©e</span>;\r\n      default:\r\n        return <span className=\"gp-status-badge gp-status-pending\">En attente</span>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <style>{encapsulatedStyles}</style>\r\n      <div className=\"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded\">\r\n        <div className=\"gp-candidature-container\">\r\n          <div className=\"gp-header-section\">\r\n            <h1\r\n              className=\"gp-modal-title\"\r\n              style={{ fontSize: \"1.5rem\", marginBottom: \"1.5rem\" }}\r\n            >\r\n              Liste des candidatures\r\n            </h1>\r\n\r\n            {/* Search and filter section */}\r\n          {/* Search and filter section */}\r\n<div className=\"gp-search-container\">\r\n  <div className=\"gp-search-input\">\r\n    <div className=\"gp-search-icon\">\r\n      <Search size={18} />\r\n    </div>\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Rechercher par nom, pr√©nom, email ou poste...\"\r\n      value={searchTerm}\r\n      onChange={(e) => setSearchTerm(e.target.value)}\r\n      className=\"gp-input-field\"\r\n    />\r\n  </div>\r\n  <div>\r\n    <select\r\n      className=\"gp-filter-dropdown\"\r\n      value={filterStatus}\r\n      onChange={(e) => setFilterStatus(e.target.value)}\r\n    >\r\n      <option value=\"all\">Tous les statuts</option>\r\n      <option value=\"pending\">En attente</option>\r\n      <option value=\"accepted\">Accept√©s</option>\r\n      <option value=\"rejected\">Refus√©s</option>\r\n    </select>\r\n  </div>\r\n</div>\r\n\r\n            {/* Candidatures table */}\r\n            <div className=\"gp-table-container\">\r\n              <table className=\"gp-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"gp-th\">Nom</th>\r\n                    <th className=\"gp-th\">Pr√©nom</th>\r\n                    <th className=\"gp-th\">Email</th>\r\n                    <th className=\"gp-th\">Poste</th>\r\n                    <th className=\"gp-th\">T√©l√©phone</th>\r\n                   \r\n                    <th className=\"gp-th\">Statut</th>\r\n                    <th className=\"gp-th\" style={{ textAlign: \"center\" }}>\r\n                      Actions\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isLoading ? (\r\n                    <tr>\r\n                      <td\r\n                        colSpan=\"8\"\r\n                        className=\"gp-td\"\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          color: \"#6b7280\",\r\n                          padding: \"1.5rem 0\",\r\n                        }}\r\n                      >\r\n                        Chargement des candidatures...\r\n                      </td>\r\n                    </tr>\r\n                  ) : currentItems.length > 0 ? (\r\n                    currentItems.map((candidature) => (\r\n                      <tr className=\"gp-tr\" key={candidature._id}>\r\n                        <td className=\"gp-td\">{candidature.nom}</td>\r\n                        <td className=\"gp-td\">{candidature.prenom}</td>\r\n                        <td className=\"gp-td\">{candidature.email}</td>\r\n                        <td className=\"gp-td\">{candidature.posteTitle}</td>\r\n                        <td className=\"gp-td\">{candidature.tel}</td>\r\n                        \r\n                        <td className=\"gp-td\">\r\n                          {getStatusBadge(candidature.status)}\r\n                        </td>\r\n                        <td className=\"gp-td\">\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"center\",\r\n                            }}\r\n                          >\r\n                            <button\r\n                              onClick={() => handleViewCandidature(candidature)}\r\n                              className=\"gp-action-button gp-view-button\"\r\n                              title=\"Voir d√©tails\"\r\n                            >\r\n                              <Eye size={16} />\r\n                            </button>\r\n                            \r\n                            {candidature.status === \"pending\" && (\r\n                              <>\r\n                                <button\r\n                                  onClick={() => handleStatusAction(\"accepted\", candidature)}\r\n                                  className=\"gp-action-button gp-accept-button\"\r\n                                  title=\"Accepter\"\r\n                                >\r\n                                  <Check size={16} />\r\n                                </button>\r\n                                <button\r\n                                  onClick={() => handleStatusAction(\"rejected\", candidature)}\r\n                                  className=\"gp-action-button gp-reject-button\"\r\n                                  title=\"Refuser\"\r\n                                >\r\n                                  <X size={16} />\r\n                                </button>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td\r\n                        colSpan=\"8\"\r\n                        className=\"gp-td\"\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          color: \"#6b7280\",\r\n                          padding: \"1.5rem 0\",\r\n                        }}\r\n                      >\r\n                        Aucune candidature trouv√©e\r\n                      </td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            {/* Pagination */}\r\n            <div className=\"gp-pagination\">\r\n              <div style={{ fontSize: \"0.875rem\", color: \"#6b7280\" }}>\r\n                Affichage de {currentItems.length} sur{\" \"}\r\n                {filteredCandidatures.length} candidatures\r\n              </div>\r\n              <div style={{ display: \"flex\", gap: \"0.5rem\" }}>\r\n                <button \r\n                  onClick={() => paginate(currentPage - 1)} \r\n                  disabled={currentPage === 1}\r\n                  className=\"gp-page-button\"\r\n                >\r\n                  Pr√©c√©dent\r\n                </button>\r\n                \r\n                {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (\r\n                  <button\r\n                    key={number}\r\n                    onClick={() => paginate(number)}\r\n                    className={`gp-page-button ${currentPage === number ? 'gp-active' : ''}`}\r\n                  >\r\n                    {number}\r\n                  </button>\r\n                ))}\r\n                \r\n                <button \r\n                  onClick={() => paginate(currentPage + 1)} \r\n                  disabled={currentPage === totalPages}\r\n                  className=\"gp-page-button\"\r\n                >\r\n                  Suivant\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* View candidature details modal */}\r\n        {isViewModalOpen && selectedCandidature && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\" style={{ maxWidth: \"32rem\" }}>\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">D√©tails de la candidature</h2>\r\n                <button onClick={() => setIsViewModalOpen(false)} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div className=\"gp-candidate-details\">\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Nom:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.nom}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Pr√©nom:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.prenom}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Email:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.email}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">T√©l√©phone:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.tel}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Poste:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.posteTitle}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Adresse:</span>\r\n                  <span className=\"gp-detail-value\">{selectedCandidature.adresse}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Date:</span>\r\n                  <span className=\"gp-detail-value\">{formatDate(selectedCandidature.createdAt)}</span>\r\n                </div>\r\n                <div className=\"gp-detail-item\">\r\n                  <span className=\"gp-detail-label\">Statut:</span>\r\n                  <span className=\"gp-detail-value\">{getStatusBadge(selectedCandidature.status)}</span>\r\n                </div>\r\n                \r\n                <a \r\n                  href={`http://localhost:5000/cv/${selectedCandidature.cv}`} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"gp-cv-download\"\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\r\n                    <polyline points=\"7 10 12 15 17 10\"></polyline>\r\n                    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\r\n                  </svg>\r\n                  T√©l√©charger le CV\r\n                </a>\r\n              </div>\r\n\r\n              <div className=\"gp-modal-footer\">\r\n                <button\r\n                  onClick={() => setIsViewModalOpen(false)}\r\n                  className=\"gp-btn gp-btn-cancel\"\r\n                >\r\n                  Fermer\r\n                </button>\r\n                \r\n               \r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Confirm status change modal */}\r\n        {isStatusModalOpen && selectedCandidature && (\r\n          <div className=\"gp-modal-overlay\">\r\n            <div className=\"gp-modal-container\">\r\n              <div className=\"gp-modal-header\">\r\n                <h2 className=\"gp-modal-title\">Confirmation</h2>\r\n                <button onClick={() => setIsStatusModalOpen(false)} className=\"gp-modal-close\">\r\n                  <X size={24} />\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                <p style={{ marginBottom: \"1.5rem\", color: \"#4b5563\" }}>\r\n                  √ätes-vous s√ªr de vouloir {statusAction === \"accepted\" ? \"accepter\" : \"refuser\"} la candidature de{\" \"}\r\n                  <strong>{selectedCandidature.nom} {selectedCandidature.prenom}</strong> pour le poste de <strong>{selectedCandidature.posteTitle}</strong> ?\r\n                </p>\r\n\r\n                <div className=\"gp-modal-footer\">\r\n                  <button\r\n                    onClick={() => setIsStatusModalOpen(false)}\r\n                    className=\"gp-btn gp-btn-cancel\"\r\n                  >\r\n                    Annuler\r\n                  </button>\r\n                  <button\r\n                    onClick={handleConfirmStatusChange}\r\n                    className=\"gp-btn gp-btn-confirm\"\r\n                    style={{\r\n                      backgroundColor: statusAction === \"accepted\" ? \"#059669\" : \"#dc2626\",\r\n                    }}\r\n                  >\r\n                    {statusAction === \"accepted\" ? \"Accepter\" : \"Refuser\"}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Toast notifications */}\r\n        {toast.affiche && (\r\n          <Toast\r\n            message={toast.message}\r\n            type={toast.type}\r\n            onClose={fermerToast}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCardCandidature.propTypes = {\r\n  color: PropTypes.string,\r\n};","C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardFormation.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeFormation.js",["225"],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Cards\\CardDemandeAvance.js",[],"C:\\Users\\Mega-PC\\Projet-pfe-ubcirh25\\Frontend\\src\\components\\Footers\\Footer.js",[],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":2,"column":25,"nodeType":"232","messageId":"233","endLine":2,"endColumn":33},{"ruleId":"230","severity":1,"message":"234","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":14},{"ruleId":"230","severity":1,"message":"235","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":15},{"ruleId":"230","severity":1,"message":"236","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":148,"column":6,"nodeType":"239","endLine":148,"endColumn":31,"suggestions":"240"},{"ruleId":"230","severity":1,"message":"241","line":331,"column":13,"nodeType":"232","messageId":"233","endLine":331,"endColumn":21},{"ruleId":"230","severity":1,"message":"242","line":30,"column":9,"nodeType":"232","messageId":"233","endLine":30,"endColumn":25},{"ruleId":"230","severity":1,"message":"243","line":216,"column":9,"nodeType":"232","messageId":"233","endLine":216,"endColumn":21},{"ruleId":"244","severity":1,"message":"245","line":318,"column":23,"nodeType":"246","endLine":325,"endColumn":24},{"ruleId":"230","severity":1,"message":"247","line":550,"column":17,"nodeType":"232","messageId":"233","endLine":550,"endColumn":25},{"ruleId":"230","severity":1,"message":"248","line":2,"column":67,"nodeType":"232","messageId":"233","endLine":2,"endColumn":78},{"ruleId":"230","severity":1,"message":"249","line":716,"column":9,"nodeType":"232","messageId":"233","endLine":716,"endColumn":24},{"ruleId":"230","severity":1,"message":"250","line":2,"column":18,"nodeType":"232","messageId":"233","endLine":2,"endColumn":29},{"ruleId":"230","severity":1,"message":"248","line":2,"column":67,"nodeType":"232","messageId":"233","endLine":2,"endColumn":78},{"ruleId":"237","severity":1,"message":"251","line":360,"column":6,"nodeType":"239","endLine":360,"endColumn":8,"suggestions":"252"},{"ruleId":"230","severity":1,"message":"253","line":421,"column":11,"nodeType":"232","messageId":"233","endLine":421,"endColumn":23},{"ruleId":"254","severity":1,"message":"255","line":783,"column":45,"nodeType":"256","messageId":"257","endLine":783,"endColumn":47},{"ruleId":"254","severity":1,"message":"255","line":783,"column":79,"nodeType":"256","messageId":"257","endLine":783,"endColumn":81},{"ruleId":"237","severity":1,"message":"258","line":355,"column":6,"nodeType":"239","endLine":355,"endColumn":8,"suggestions":"259"},{"ruleId":"230","severity":1,"message":"260","line":3,"column":33,"nodeType":"232","messageId":"233","endLine":3,"endColumn":39},{"ruleId":"237","severity":1,"message":"261","line":354,"column":6,"nodeType":"239","endLine":354,"endColumn":8,"suggestions":"262"},{"ruleId":"230","severity":1,"message":"241","line":144,"column":13,"nodeType":"232","messageId":"233","endLine":144,"endColumn":21},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Signin' is defined but never used.","'Postule' is defined but never used.","'AdminNavbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'applyFilters'. Either include it or remove the dependency array.","ArrayExpression",["265"],"'response' is assigned a value but never used.","'validatePassword' is assigned a value but never used.","'handleLogout' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setError' is assigned a value but never used.","'ChevronDown' is defined but never used.","'renderTypeConge' is assigned a value but never used.","'AlertCircle' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOffers'. Either include it or remove the dependency array.",["266"],"'errorMessage' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has a missing dependency: 'fetchDepartments'. Either include it or remove the dependency array.",["267"],"'Filter' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCandidatures'. Either include it or remove the dependency array.",["268"],"no-global-assign","no-unsafe-negation",{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [applyFilters, dateFilter, jobListings]",{"range":"277","text":"278"},"Update the dependencies array to be: [fetchOffers]",{"range":"279","text":"280"},"Update the dependencies array to be: [fetchDepartments]",{"range":"281","text":"282"},"Update the dependencies array to be: [fetchCandidatures]",{"range":"283","text":"284"},[4423,4448],"[applyFilters, dateFilter, jobListings]",[7461,7463],"[fetchOffers]",[7706,7708],"[fetchDepartments]",[7403,7405],"[fetchCandidatures]"]