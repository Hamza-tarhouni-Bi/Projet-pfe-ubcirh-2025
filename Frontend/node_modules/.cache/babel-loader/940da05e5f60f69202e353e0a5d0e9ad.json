{"ast":null,"code":"const personnelModal = require('../models/PersonnelSchema');\nconst bcrypt = require(\"bcrypt\");\nconst {\n  sendWelcomeEmail\n} = require('../utiles/emailService');\nconst {\n  sendUpdateEmail,\n  sendProfileImageUpdateEmail\n} = require('../utiles/updatemail');\nconst path = require('path');\nconst fs = require('fs');\nconst Personnel = require('../models/PersonnelSchema');\nconst jwt = require(\"jsonwebtoken\");\n\n//Liste des personnels\nmodule.exports.getAllPersonnel = async (req, res) => {\n  try {\n    const personnellist = await personnelModal.find();\n    if (!personnellist) {\n      throw new Error(\"Personnel not found\");\n    }\n    res.status(200).json(personnellist);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n};\n\n//Suppression d un personnel \nmodule.exports.deletePersonnel = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const deleted = await personnelModal.findByIdAndDelete(id);\n    res.status(200).json(deleted);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n};\nmodule.exports.addPersonnelWithimage = async (req, res) => {\n  try {\n    const personnelData = {\n      ...req.body\n    };\n    const rawPassword = personnelData.password;\n    if (req.file) {\n      personnelData.image = req.file.filename;\n    } else {\n      personnelData.image = 'images/defaultuser.jpg';\n    }\n    const personnel = new personnelModal(personnelData);\n    const personneladded = await personnel.save();\n    try {\n      await sendWelcomeEmail(personneladded.email, personneladded.nom, personneladded.prenom, rawPassword);\n      console.log('Email de bienvenue envoyé à', personneladded.email);\n    } catch (emailError) {\n      console.error('Erreur lors de l\\'envoi de l\\'email:', emailError);\n    }\n    res.status(201).json(personneladded);\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n};\n\n//update personnel - VERSION FINALE (mêmes routes)\nmodule.exports.updatePersonnel = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const updateData = {\n      ...req.body\n    };\n\n    // Trouver le personnel avant la mise à jour\n    const personnelBeforeUpdate = await personnelModal.findById(id);\n    if (!personnelBeforeUpdate) {\n      return res.status(404).json({\n        error: \"Personnel non trouvé\"\n      });\n    }\n\n    // Vérification du mot de passe actuel si on essaie de changer le mot de passe\n    if (updateData.password && updateData.currentPassword) {\n      // Vérifier si le mot de passe actuel est correct\n      const isValidPassword = await bcrypt.compare(updateData.currentPassword, personnelBeforeUpdate.password);\n      if (!isValidPassword) {\n        return res.status(400).json({\n          error: \"Le mot de passe actuel est incorrect\"\n        });\n      }\n\n      // Hash le nouveau mot de passe\n      const salt = await bcrypt.genSalt(10);\n      updateData.password = await bcrypt.hash(updateData.password, salt);\n    }\n\n    // Supprimer le champ currentPassword car on n'en a plus besoin\n    delete updateData.currentPassword;\n\n    // Gestion de l'image\n    let imageUpdated = false;\n    if (req.file) {\n      updateData.image = req.file.filename;\n      imageUpdated = true;\n\n      // Envoyer l'email pour la mise à jour de l'image IMMÉDIATEMENT\n      try {\n        await sendProfileImageUpdateEmail(personnelBeforeUpdate.email, personnelBeforeUpdate.nom, personnelBeforeUpdate.prenom);\n        console.log('Email pour mise à jour image envoyé avec succès');\n      } catch (emailError) {\n        console.error(\"Erreur d'envoi email image:\", emailError);\n      }\n    }\n\n    // Détection des champs modifiés (sauf image)\n    const changedFields = {};\n    Object.keys(updateData).forEach(key => {\n      if (key !== 'image' && key !== 'password' && personnelBeforeUpdate[key] !== updateData[key]) {\n        changedFields[key] = updateData[key];\n      }\n    });\n\n    // Si le mot de passe a été modifié, l'ajouter aux champs modifiés pour notification\n    // sans exposer le hash dans l'email\n    if (updateData.password) {\n      changedFields.password = \"******\"; // Masquer le mot de passe dans l'email\n    }\n\n    // Mise à jour dans la base de données\n    const updatedPersonnel = await personnelModal.findByIdAndUpdate(id, updateData, {\n      new: true\n    });\n\n    // Envoyer l'email pour les autres champs modifiés (sauf si seul l'image a changé)\n    if (Object.keys(changedFields).length > 0) {\n      try {\n        await sendUpdateEmail(updatedPersonnel.email, updatedPersonnel.nom, updatedPersonnel.prenom, changedFields);\n        console.log('Email pour champs modifiés envoyé avec succès');\n      } catch (emailError) {\n        console.error(\"Erreur d'envoi email champs:\", emailError);\n      }\n    }\n    res.status(200).json(updatedPersonnel);\n  } catch (error) {\n    console.error('Erreur dans updatePersonnel:', error);\n    res.status(500).json({\n      error: error.message\n    });\n  }\n};\nconst createToken = id => {\n  return jwt.sign({\n    id\n  }, 'net ubcirh secret', {\n    expiresIn: '1m'\n  });\n};\nmodule.exports.login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const personnel = await personnelModal.login(email, password);\n    const connecte = true;\n    await personnelModal.findByIdAndUpdate(personnel._id, {\n      $set: {\n        connecte\n      }\n    });\n    const token = createToken(personnel._id);\n    res.cookie('jwt_token_ubcirh', token, {\n      httpOnly: true,\n      maxAge: 60 * 1000\n    });\n    res.status(200).json({\n      message: \"connected\",\n      personnel: personnel\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: error.message\n    });\n  }\n};\nmodule.exports.logout = async (req, res) => {\n  try {\n    const id = req.personnel._id;\n    const connecte = false;\n    await personnelModal.findByIdAndUpdate(id, {\n      $set: {\n        connecte\n      }\n    });\n    res.cookie(\"jwt_token_ubcirh\", \"\", {\n      httpOnly: false,\n      maxAge: 1\n    });\n    res.status(200).json(\"User successfully logged out\");\n  } catch (error) {\n    res.status(500).json({\n      message: error.message\n    });\n  }\n};","map":{"version":3,"names":["personnelModal","require","bcrypt","sendWelcomeEmail","sendUpdateEmail","sendProfileImageUpdateEmail","path","fs","Personnel","jwt","module","exports","getAllPersonnel","req","res","personnellist","find","Error","status","json","error","message","deletePersonnel","id","params","deleted","findByIdAndDelete","addPersonnelWithimage","personnelData","body","rawPassword","password","file","image","filename","personnel","personneladded","save","email","nom","prenom","console","log","emailError","updatePersonnel","updateData","personnelBeforeUpdate","findById","currentPassword","isValidPassword","compare","salt","genSalt","hash","imageUpdated","changedFields","Object","keys","forEach","key","updatedPersonnel","findByIdAndUpdate","new","length","createToken","sign","expiresIn","login","connecte","_id","$set","token","cookie","httpOnly","maxAge","logout"],"sources":["C:/Users/Mega-PC/Projet-pfe-ubcirh25/Frontend/src/views/auth/Signin.js"],"sourcesContent":["const personnelModal = require('../models/PersonnelSchema');\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { sendWelcomeEmail } = require('../utiles/emailService');\r\nconst { sendUpdateEmail, sendProfileImageUpdateEmail } = require('../utiles/updatemail');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst Personnel = require('../models/PersonnelSchema');\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\n//Liste des personnels\r\nmodule.exports.getAllPersonnel = async (req, res) => {\r\n  try {\r\n    const personnellist = await personnelModal.find();\r\n    if (!personnellist) {\r\n      throw new Error(\"Personnel not found\");\r\n    }\r\n    res.status(200).json(personnellist);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n//Suppression d un personnel \r\nmodule.exports.deletePersonnel = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const deleted = await personnelModal.findByIdAndDelete(id);\r\n    \r\n    res.status(200).json(deleted);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\nmodule.exports.addPersonnelWithimage = async (req, res) => {\r\n  try {\r\n    const personnelData = { ...req.body };\r\n    const rawPassword = personnelData.password; \r\n    \r\n    if (req.file) {\r\n      personnelData.image = req.file.filename;\r\n    } else {\r\n      personnelData.image = 'images/defaultuser.jpg';\r\n    }\r\n    \r\n    const personnel = new personnelModal(personnelData);\r\n    const personneladded = await personnel.save();\r\n    \r\n    try {\r\n      await sendWelcomeEmail(\r\n        personneladded.email,\r\n        personneladded.nom,\r\n        personneladded.prenom,\r\n        rawPassword\r\n      );\r\n      console.log('Email de bienvenue envoyé à', personneladded.email);\r\n    } catch (emailError) {\r\n      console.error('Erreur lors de l\\'envoi de l\\'email:', emailError);\r\n    }\r\n    \r\n    res.status(201).json(personneladded);\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\n//update personnel - VERSION FINALE (mêmes routes)\r\nmodule.exports.updatePersonnel = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updateData = { ...req.body };\r\n    \r\n    // Trouver le personnel avant la mise à jour\r\n    const personnelBeforeUpdate = await personnelModal.findById(id);\r\n    if (!personnelBeforeUpdate) {\r\n      return res.status(404).json({ error: \"Personnel non trouvé\" });\r\n    }\r\n    \r\n    // Vérification du mot de passe actuel si on essaie de changer le mot de passe\r\n    if (updateData.password && updateData.currentPassword) {\r\n      // Vérifier si le mot de passe actuel est correct\r\n      const isValidPassword = await bcrypt.compare(\r\n        updateData.currentPassword,\r\n        personnelBeforeUpdate.password\r\n      );\r\n      \r\n      if (!isValidPassword) {\r\n        return res.status(400).json({ error: \"Le mot de passe actuel est incorrect\" });\r\n      }\r\n      \r\n      // Hash le nouveau mot de passe\r\n      const salt = await bcrypt.genSalt(10);\r\n      updateData.password = await bcrypt.hash(updateData.password, salt);\r\n    }\r\n    \r\n    // Supprimer le champ currentPassword car on n'en a plus besoin\r\n    delete updateData.currentPassword;\r\n    \r\n    // Gestion de l'image\r\n    let imageUpdated = false;\r\n    if (req.file) {\r\n      updateData.image = req.file.filename;\r\n      imageUpdated = true;\r\n      \r\n      // Envoyer l'email pour la mise à jour de l'image IMMÉDIATEMENT\r\n      try {\r\n        await sendProfileImageUpdateEmail(\r\n          personnelBeforeUpdate.email,\r\n          personnelBeforeUpdate.nom,\r\n          personnelBeforeUpdate.prenom\r\n        );\r\n        console.log('Email pour mise à jour image envoyé avec succès');\r\n      } catch (emailError) {\r\n        console.error(\"Erreur d'envoi email image:\", emailError);\r\n      }\r\n    }\r\n\r\n    // Détection des champs modifiés (sauf image)\r\n    const changedFields = {};\r\n    Object.keys(updateData).forEach(key => {\r\n      if (key !== 'image' && key !== 'password' && personnelBeforeUpdate[key] !== updateData[key]) {\r\n        changedFields[key] = updateData[key];\r\n      }\r\n    });\r\n    \r\n    // Si le mot de passe a été modifié, l'ajouter aux champs modifiés pour notification\r\n    // sans exposer le hash dans l'email\r\n    if (updateData.password) {\r\n      changedFields.password = \"******\"; // Masquer le mot de passe dans l'email\r\n    }\r\n\r\n    // Mise à jour dans la base de données\r\n    const updatedPersonnel = await personnelModal.findByIdAndUpdate(\r\n      id,\r\n      updateData,\r\n      { new: true }\r\n    );\r\n\r\n    // Envoyer l'email pour les autres champs modifiés (sauf si seul l'image a changé)\r\n    if (Object.keys(changedFields).length > 0) {\r\n      try {\r\n        await sendUpdateEmail(\r\n          updatedPersonnel.email,\r\n          updatedPersonnel.nom,\r\n          updatedPersonnel.prenom,\r\n          changedFields\r\n        );\r\n        console.log('Email pour champs modifiés envoyé avec succès');\r\n      } catch (emailError) {\r\n        console.error(\"Erreur d'envoi email champs:\", emailError);\r\n      }\r\n    }\r\n  \r\n    res.status(200).json(updatedPersonnel);\r\n  } catch (error) {\r\n    console.error('Erreur dans updatePersonnel:', error);\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n};\r\n\r\nconst createToken = (id) => {\r\n  return jwt.sign({id}, 'net ubcirh secret', {expiresIn: '1m'});\r\n}\r\n\r\nmodule.exports.login = async(req, res) => {\r\n  try {\r\n    const {email, password} = req.body;\r\n    const personnel = await personnelModal.login(email, password);\r\n    const connecte = true;\r\n    await personnelModal.findByIdAndUpdate(personnel._id, {\r\n      $set: {connecte}\r\n    });\r\n    const token = createToken(personnel._id);\r\n    res.cookie('jwt_token_ubcirh', token, {httpOnly: true, maxAge: 60*1000});\r\n    res.status(200).json({message: \"connected\", personnel: personnel});\r\n  } catch (error) {\r\n    res.status(500).json({message: error.message});\r\n  }\r\n}\r\n\r\nmodule.exports.logout = async (req, res) => {\r\n  try {\r\n    const id = req.personnel._id;\r\n    \r\n    const connecte = false;\r\n    await personnelModal.findByIdAndUpdate(id, { \r\n      $set: { connecte }\r\n    });\r\n    res.cookie(\"jwt_token_ubcirh\", \"\", {httpOnly: false, maxAge: 1});\r\n    res.status(200).json(\"User successfully logged out\");\r\n  } catch (error) {\r\n    res.status(500).json({message: error.message});\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}